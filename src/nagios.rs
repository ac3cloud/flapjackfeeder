/* automatically generated by rust-bindgen */

pub type va_list = __darwin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebmodule_struct {
    pub filename: *mut ::libc::c_char,
    pub args: *mut ::libc::c_char,
    pub info: [*mut ::libc::c_char; 6usize],
    pub should_be_loaded: ::libc::c_int,
    pub is_currently_loaded: ::libc::c_int,
    pub module_handle: *mut ::libc::c_void,
    pub init_func: *mut ::libc::c_void,
    pub deinit_func: *mut ::libc::c_void,
    pub next: *mut Struct_nebmodule_struct,
}
impl ::std::clone::Clone for Struct_nebmodule_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebmodule_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebmodule = Struct_nebmodule_struct;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type size_t = __darwin_size_t;
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sbuf {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___sFILEX { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _close: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub _read: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: *mut ::libc::c_char,
                                                   arg3: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                   arg2: fpos_t,
                                                   arg3: ::libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void,
                                                    arg2:
                                                        *const ::libc::c_char,
                                                    arg3: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _extra: *mut Struct___sFILEX,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar; 3usize],
    pub _nbuf: [::libc::c_uchar; 1usize],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: fpos_t,
}
impl ::std::clone::Clone for Struct___sFILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = Struct___sFILE;
pub type off_t = __darwin_off_t;
pub type ssize_t = __darwin_ssize_t;
pub type errno_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_accessx_descriptor {
    pub ad_name_offset: ::libc::c_uint,
    pub ad_flags: ::libc::c_int,
    pub ad_pad: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_accessx_descriptor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_accessx_descriptor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint64_t = ::libc::c_ulonglong;
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
pub type intptr_t = __darwin_intptr_t;
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
impl ::std::clone::Clone for Struct_fd_set {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_fd_set;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type sigset_t = __darwin_sigset_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type uuid_t = __darwin_uuid_t;
pub enum Struct_fssearchblock { }
pub enum Struct_searchstate { }
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type uintptr_t = ::libc::c_ulong;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = int64_t;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::libc::c_char;
pub type daddr_t = int32_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type segsz_t = int32_t;
pub type swblk_t = int32_t;
pub type clock_t = __darwin_clock_t;
pub type rsize_t = __darwin_size_t;
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed2;
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::libc::c_int,
    pub sigev_signo: ::libc::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)
                                                         -> ()>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     -> *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut Struct___siginfo,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void,
                                                      arg2: ::libc::c_int,
                                                      arg3: ::libc::c_int,
                                                      arg4: *mut siginfo_t,
                                                      arg5:
                                                          *mut ::libc::c_void)
                                            -> ()>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                              -> ()>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::libc::c_long,
    pub ru_ixrss: ::libc::c_long,
    pub ru_idrss: ::libc::c_long,
    pub ru_isrss: ::libc::c_long,
    pub ru_minflt: ::libc::c_long,
    pub ru_majflt: ::libc::c_long,
    pub ru_nswap: ::libc::c_long,
    pub ru_inblock: ::libc::c_long,
    pub ru_oublock: ::libc::c_long,
    pub ru_msgsnd: ::libc::c_long,
    pub ru_msgrcv: ::libc::c_long,
    pub ru_nsignals: ::libc::c_long,
    pub ru_nvcsw: ::libc::c_long,
    pub ru_nivcsw: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_rusage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v3 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
    pub ri_cpu_time_qos_default: uint64_t,
    pub ri_cpu_time_qos_maintenance: uint64_t,
    pub ri_cpu_time_qos_background: uint64_t,
    pub ri_cpu_time_qos_utility: uint64_t,
    pub ri_cpu_time_qos_legacy: uint64_t,
    pub ri_cpu_time_qos_user_initiated: uint64_t,
    pub ri_cpu_time_qos_user_interactive: uint64_t,
    pub ri_billed_system_time: uint64_t,
    pub ri_serviced_system_time: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_current = Struct_rusage_info_v3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
impl ::std::clone::Clone for Struct_rlimit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rlimit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
impl ::std::clone::Clone for Struct_proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proc_rlimit_control_wakeupmon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_T(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_S(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
impl ::std::clone::Clone for Struct_ostat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ostat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_birthtimespec: Struct_timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::clone::Clone for Struct_stat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: Struct_timespec,
    pub st_mtimespec: Struct_timespec,
    pub st_ctimespec: Struct_timespec,
    pub st_birthtimespec: Struct_timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
impl ::std::clone::Clone for Struct_stat64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stat64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__filesec { }
pub type filesec_t = *mut Struct__filesec;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dirent {
    pub d_ino: __uint64_t,
    pub d_seekoff: __uint64_t,
    pub d_reclen: __uint16_t,
    pub d_namlen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_name: [::libc::c_char; 1024usize],
}
impl ::std::clone::Clone for Struct_dirent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dirent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct__telldir { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub __dd_fd: ::libc::c_int,
    pub __dd_loc: ::libc::c_long,
    pub __dd_size: ::libc::c_long,
    pub __dd_buf: *mut ::libc::c_char,
    pub __dd_len: ::libc::c_int,
    pub __dd_seek: ::libc::c_long,
    pub __dd_rewind: ::libc::c_long,
    pub __dd_flags: ::libc::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut Struct__telldir,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DIR = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_param {
    pub sched_priority: ::libc::c_int,
    pub __opaque: [::libc::c_char; 4usize],
}
impl ::std::clone::Clone for Struct_sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const QOS_CLASS_USER_INTERACTIVE: ::libc::c_uint = 33;
pub const QOS_CLASS_USER_INITIATED: ::libc::c_uint = 25;
pub const QOS_CLASS_DEFAULT: ::libc::c_uint = 21;
pub const QOS_CLASS_UTILITY: ::libc::c_uint = 17;
pub const QOS_CLASS_BACKGROUND: ::libc::c_uint = 9;
pub const QOS_CLASS_UNSPECIFIED: ::libc::c_uint = 0;
pub type qos_class_t = ::libc::c_uint;
pub enum Struct_pthread_override_s { }
pub type pthread_override_t = *mut Struct_pthread_override_s;
pub type mach_port_t = __darwin_mach_port_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_option {
    pub name: *const ::libc::c_char,
    pub has_arg: ::libc::c_int,
    pub flag: *mut ::libc::c_int,
    pub val: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_option {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_option {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group {
    pub gr_name: *mut ::libc::c_char,
    pub gr_passwd: *mut ::libc::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_group {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uuid_string_t = __darwin_uuid_string_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_passwd {
    pub pw_name: *mut ::libc::c_char,
    pub pw_passwd: *mut ::libc::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::libc::c_char,
    pub pw_gecos: *mut ::libc::c_char,
    pub pw_dir: *mut ::libc::c_char,
    pub pw_shell: *mut ::libc::c_char,
    pub pw_expire: __darwin_time_t,
}
impl ::std::clone::Clone for Struct_passwd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_passwd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::libc::c_short,
    pub l_whence: ::libc::c_short,
}
impl ::std::clone::Clone for Struct_flock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flocktimeout {
    pub fl: Struct_flock,
    pub timeout: Struct_timespec,
}
impl ::std::clone::Clone for Struct_flocktimeout {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flocktimeout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_radvisory {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_radvisory {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fcodeblobs {
    pub f_cd_hash: *mut ::libc::c_void,
    pub f_hash_size: size_t,
    pub f_cd_buffer: *mut ::libc::c_void,
    pub f_cd_size: size_t,
    pub f_out_size: *mut ::libc::c_uint,
    pub f_arch: ::libc::c_int,
    pub __padding: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_fcodeblobs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fcodeblobs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fcodeblobs_t = Struct_fcodeblobs;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::libc::c_void,
    pub fs_blob_size: size_t,
}
impl ::std::clone::Clone for Struct_fsignatures {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fsignatures {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fsignatures_t = Struct_fsignatures;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fstore {
    pub fst_flags: ::libc::c_uint,
    pub fst_posmode: ::libc::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
impl ::std::clone::Clone for Struct_fstore {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fstore {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fstore_t = Struct_fstore;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: size_t,
    pub fbt_buffer: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_fbootstraptransfer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_fbootstraptransfer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fbootstraptransfer_t = Struct_fbootstraptransfer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_log2phys {
    pub l2p_flags: ::libc::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
impl ::std::clone::Clone for Struct_log2phys {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_log2phys {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const FILESEC_OWNER: ::libc::c_uint = 1;
pub const FILESEC_GROUP: ::libc::c_uint = 2;
pub const FILESEC_UUID: ::libc::c_uint = 3;
pub const FILESEC_MODE: ::libc::c_uint = 4;
pub const FILESEC_ACL: ::libc::c_uint = 5;
pub const FILESEC_GRPUUID: ::libc::c_uint = 6;
pub const FILESEC_ACL_RAW: ::libc::c_uint = 100;
pub const FILESEC_ACL_ALLOCSIZE: ::libc::c_uint = 101;
pub type filesec_property_t = Enum_Unnamed10;
pub type host = Struct_host_struct;
pub type service = Struct_service_struct;
pub type contact = Struct_contact_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_objectlist_struct {
    pub object_ptr: *mut ::libc::c_void,
    pub next: *mut Struct_objectlist_struct,
}
impl ::std::clone::Clone for Struct_objectlist_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_objectlist_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type objectlist = Struct_objectlist_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timerange_struct {
    pub range_start: ::libc::c_ulong,
    pub range_end: ::libc::c_ulong,
    pub next: *mut Struct_timerange_struct,
}
impl ::std::clone::Clone for Struct_timerange_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timerange_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timerange = Struct_timerange_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_daterange_struct {
    pub _type: ::libc::c_int,
    pub syear: ::libc::c_int,
    pub smon: ::libc::c_int,
    pub smday: ::libc::c_int,
    pub swday: ::libc::c_int,
    pub swday_offset: ::libc::c_int,
    pub eyear: ::libc::c_int,
    pub emon: ::libc::c_int,
    pub emday: ::libc::c_int,
    pub ewday: ::libc::c_int,
    pub ewday_offset: ::libc::c_int,
    pub skip_interval: ::libc::c_int,
    pub times: *mut timerange,
    pub next: *mut Struct_daterange_struct,
}
impl ::std::clone::Clone for Struct_daterange_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_daterange_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type daterange = Struct_daterange_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeperiodexclusion_struct {
    pub timeperiod_name: *mut ::libc::c_char,
    pub timeperiod_ptr: *mut Struct_timeperiod_struct,
    pub next: *mut Struct_timeperiodexclusion_struct,
}
impl ::std::clone::Clone for Struct_timeperiodexclusion_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeperiodexclusion_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timeperiodexclusion = Struct_timeperiodexclusion_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeperiod_struct {
    pub name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub days: [*mut timerange; 7usize],
    pub exceptions: [*mut daterange; 5usize],
    pub exclusions: *mut timeperiodexclusion,
    pub next: *mut Struct_timeperiod_struct,
    pub nexthash: *mut Struct_timeperiod_struct,
}
impl ::std::clone::Clone for Struct_timeperiod_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeperiod_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timeperiod = Struct_timeperiod_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contactsmember_struct {
    pub contact_name: *mut ::libc::c_char,
    pub next: *mut Struct_contactsmember_struct,
}
impl ::std::clone::Clone for Struct_contactsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contactsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type contactsmember = Struct_contactsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contactgroup_struct {
    pub group_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub members: *mut contactsmember,
    pub next: *mut Struct_contactgroup_struct,
    pub nexthash: *mut Struct_contactgroup_struct,
}
impl ::std::clone::Clone for Struct_contactgroup_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contactgroup_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type contactgroup = Struct_contactgroup_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contactgroupsmember_struct {
    pub group_name: *mut ::libc::c_char,
    pub next: *mut Struct_contactgroupsmember_struct,
}
impl ::std::clone::Clone for Struct_contactgroupsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contactgroupsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type contactgroupsmember = Struct_contactgroupsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_customvariablesmember_struct {
    pub variable_name: *mut ::libc::c_char,
    pub variable_value: *mut ::libc::c_char,
    pub has_been_modified: ::libc::c_int,
    pub next: *mut Struct_customvariablesmember_struct,
}
impl ::std::clone::Clone for Struct_customvariablesmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_customvariablesmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type customvariablesmember = Struct_customvariablesmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_command_struct {
    pub name: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub next: *mut Struct_command_struct,
    pub nexthash: *mut Struct_command_struct,
}
impl ::std::clone::Clone for Struct_command_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_command_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type command = Struct_command_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_commandsmember_struct {
    pub command: *mut ::libc::c_char,
    pub next: *mut Struct_commandsmember_struct,
}
impl ::std::clone::Clone for Struct_commandsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_commandsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type commandsmember = Struct_commandsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contact_struct {
    pub name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub email: *mut ::libc::c_char,
    pub pager: *mut ::libc::c_char,
    pub address: [*mut ::libc::c_char; 6usize],
    pub host_notification_commands: *mut commandsmember,
    pub service_notification_commands: *mut commandsmember,
    pub notify_on_service_unknown: ::libc::c_int,
    pub notify_on_service_warning: ::libc::c_int,
    pub notify_on_service_critical: ::libc::c_int,
    pub notify_on_service_recovery: ::libc::c_int,
    pub notify_on_service_flapping: ::libc::c_int,
    pub notify_on_service_downtime: ::libc::c_int,
    pub notify_on_host_down: ::libc::c_int,
    pub notify_on_host_unreachable: ::libc::c_int,
    pub notify_on_host_recovery: ::libc::c_int,
    pub notify_on_host_flapping: ::libc::c_int,
    pub notify_on_host_downtime: ::libc::c_int,
    pub host_notification_period: *mut ::libc::c_char,
    pub service_notification_period: *mut ::libc::c_char,
    pub host_notifications_enabled: ::libc::c_int,
    pub service_notifications_enabled: ::libc::c_int,
    pub can_submit_commands: ::libc::c_int,
    pub retain_status_information: ::libc::c_int,
    pub retain_nonstatus_information: ::libc::c_int,
    pub custom_variables: *mut customvariablesmember,
    pub next: *mut Struct_contact_struct,
    pub nexthash: *mut Struct_contact_struct,
}
impl ::std::clone::Clone for Struct_contact_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contact_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servicesmember_struct {
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub next: *mut Struct_servicesmember_struct,
}
impl ::std::clone::Clone for Struct_servicesmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servicesmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type servicesmember = Struct_servicesmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostsmember_struct {
    pub host_name: *mut ::libc::c_char,
    pub next: *mut Struct_hostsmember_struct,
}
impl ::std::clone::Clone for Struct_hostsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostsmember = Struct_hostsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostgroup_struct {
    pub group_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub members: *mut hostsmember,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub next: *mut Struct_hostgroup_struct,
    pub nexthash: *mut Struct_hostgroup_struct,
}
impl ::std::clone::Clone for Struct_hostgroup_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostgroup_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostgroup = Struct_hostgroup_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_struct {
    pub name: *mut ::libc::c_char,
    pub display_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub address: *mut ::libc::c_char,
    pub parent_hosts: *mut hostsmember,
    pub child_hosts: *mut hostsmember,
    pub services: *mut servicesmember,
    pub host_check_command: *mut ::libc::c_char,
    pub initial_state: ::libc::c_int,
    pub check_interval: ::libc::c_double,
    pub retry_interval: ::libc::c_double,
    pub max_attempts: ::libc::c_int,
    pub event_handler: *mut ::libc::c_char,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub notification_interval: ::libc::c_double,
    pub first_notification_delay: ::libc::c_double,
    pub notify_on_down: ::libc::c_int,
    pub notify_on_unreachable: ::libc::c_int,
    pub notify_on_recovery: ::libc::c_int,
    pub notify_on_flapping: ::libc::c_int,
    pub notify_on_downtime: ::libc::c_int,
    pub notification_period: *mut ::libc::c_char,
    pub check_period: *mut ::libc::c_char,
    pub flap_detection_enabled: ::libc::c_int,
    pub low_flap_threshold: ::libc::c_double,
    pub high_flap_threshold: ::libc::c_double,
    pub flap_detection_on_up: ::libc::c_int,
    pub flap_detection_on_down: ::libc::c_int,
    pub flap_detection_on_unreachable: ::libc::c_int,
    pub stalk_on_up: ::libc::c_int,
    pub stalk_on_down: ::libc::c_int,
    pub stalk_on_unreachable: ::libc::c_int,
    pub check_freshness: ::libc::c_int,
    pub freshness_threshold: ::libc::c_int,
    pub process_performance_data: ::libc::c_int,
    pub checks_enabled: ::libc::c_int,
    pub accept_passive_host_checks: ::libc::c_int,
    pub event_handler_enabled: ::libc::c_int,
    pub retain_status_information: ::libc::c_int,
    pub retain_nonstatus_information: ::libc::c_int,
    pub failure_prediction_enabled: ::libc::c_int,
    pub failure_prediction_options: *mut ::libc::c_char,
    pub obsess_over_host: ::libc::c_int,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub icon_image: *mut ::libc::c_char,
    pub icon_image_alt: *mut ::libc::c_char,
    pub vrml_image: *mut ::libc::c_char,
    pub statusmap_image: *mut ::libc::c_char,
    pub have_2d_coords: ::libc::c_int,
    pub x_2d: ::libc::c_int,
    pub y_2d: ::libc::c_int,
    pub have_3d_coords: ::libc::c_int,
    pub x_3d: ::libc::c_double,
    pub y_3d: ::libc::c_double,
    pub z_3d: ::libc::c_double,
    pub should_be_drawn: ::libc::c_int,
    pub custom_variables: *mut customvariablesmember,
    pub next: *mut Struct_host_struct,
    pub nexthash: *mut Struct_host_struct,
}
impl ::std::clone::Clone for Struct_host_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servicegroup_struct {
    pub group_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub members: *mut servicesmember,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub next: *mut Struct_servicegroup_struct,
    pub nexthash: *mut Struct_servicegroup_struct,
}
impl ::std::clone::Clone for Struct_servicegroup_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servicegroup_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type servicegroup = Struct_servicegroup_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_service_struct {
    pub host_name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub display_name: *mut ::libc::c_char,
    pub service_check_command: *mut ::libc::c_char,
    pub event_handler: *mut ::libc::c_char,
    pub initial_state: ::libc::c_int,
    pub check_interval: ::libc::c_double,
    pub retry_interval: ::libc::c_double,
    pub max_attempts: ::libc::c_int,
    pub parallelize: ::libc::c_int,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub notification_interval: ::libc::c_double,
    pub first_notification_delay: ::libc::c_double,
    pub notify_on_unknown: ::libc::c_int,
    pub notify_on_warning: ::libc::c_int,
    pub notify_on_critical: ::libc::c_int,
    pub notify_on_recovery: ::libc::c_int,
    pub notify_on_flapping: ::libc::c_int,
    pub notify_on_downtime: ::libc::c_int,
    pub stalk_on_ok: ::libc::c_int,
    pub stalk_on_warning: ::libc::c_int,
    pub stalk_on_unknown: ::libc::c_int,
    pub stalk_on_critical: ::libc::c_int,
    pub is_volatile: ::libc::c_int,
    pub notification_period: *mut ::libc::c_char,
    pub check_period: *mut ::libc::c_char,
    pub flap_detection_enabled: ::libc::c_int,
    pub low_flap_threshold: ::libc::c_double,
    pub high_flap_threshold: ::libc::c_double,
    pub flap_detection_on_ok: ::libc::c_int,
    pub flap_detection_on_warning: ::libc::c_int,
    pub flap_detection_on_unknown: ::libc::c_int,
    pub flap_detection_on_critical: ::libc::c_int,
    pub process_performance_data: ::libc::c_int,
    pub check_freshness: ::libc::c_int,
    pub freshness_threshold: ::libc::c_int,
    pub accept_passive_service_checks: ::libc::c_int,
    pub event_handler_enabled: ::libc::c_int,
    pub checks_enabled: ::libc::c_int,
    pub retain_status_information: ::libc::c_int,
    pub retain_nonstatus_information: ::libc::c_int,
    pub notifications_enabled: ::libc::c_int,
    pub obsess_over_service: ::libc::c_int,
    pub failure_prediction_enabled: ::libc::c_int,
    pub failure_prediction_options: *mut ::libc::c_char,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub icon_image: *mut ::libc::c_char,
    pub icon_image_alt: *mut ::libc::c_char,
    pub custom_variables: *mut customvariablesmember,
    pub next: *mut Struct_service_struct,
    pub nexthash: *mut Struct_service_struct,
}
impl ::std::clone::Clone for Struct_service_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_service_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_serviceescalation_struct {
    pub host_name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub first_notification: ::libc::c_int,
    pub last_notification: ::libc::c_int,
    pub notification_interval: ::libc::c_double,
    pub escalation_period: *mut ::libc::c_char,
    pub escalate_on_recovery: ::libc::c_int,
    pub escalate_on_warning: ::libc::c_int,
    pub escalate_on_unknown: ::libc::c_int,
    pub escalate_on_critical: ::libc::c_int,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub next: *mut Struct_serviceescalation_struct,
    pub nexthash: *mut Struct_serviceescalation_struct,
}
impl ::std::clone::Clone for Struct_serviceescalation_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_serviceescalation_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type serviceescalation = Struct_serviceescalation_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servicedependency_struct {
    pub dependency_type: ::libc::c_int,
    pub dependent_host_name: *mut ::libc::c_char,
    pub dependent_service_description: *mut ::libc::c_char,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub dependency_period: *mut ::libc::c_char,
    pub inherits_parent: ::libc::c_int,
    pub fail_on_ok: ::libc::c_int,
    pub fail_on_warning: ::libc::c_int,
    pub fail_on_unknown: ::libc::c_int,
    pub fail_on_critical: ::libc::c_int,
    pub fail_on_pending: ::libc::c_int,
    pub next: *mut Struct_servicedependency_struct,
    pub nexthash: *mut Struct_servicedependency_struct,
}
impl ::std::clone::Clone for Struct_servicedependency_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servicedependency_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type servicedependency = Struct_servicedependency_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostescalation_struct {
    pub host_name: *mut ::libc::c_char,
    pub first_notification: ::libc::c_int,
    pub last_notification: ::libc::c_int,
    pub notification_interval: ::libc::c_double,
    pub escalation_period: *mut ::libc::c_char,
    pub escalate_on_recovery: ::libc::c_int,
    pub escalate_on_down: ::libc::c_int,
    pub escalate_on_unreachable: ::libc::c_int,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub next: *mut Struct_hostescalation_struct,
    pub nexthash: *mut Struct_hostescalation_struct,
}
impl ::std::clone::Clone for Struct_hostescalation_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostescalation_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostescalation = Struct_hostescalation_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostdependency_struct {
    pub dependency_type: ::libc::c_int,
    pub dependent_host_name: *mut ::libc::c_char,
    pub host_name: *mut ::libc::c_char,
    pub dependency_period: *mut ::libc::c_char,
    pub inherits_parent: ::libc::c_int,
    pub fail_on_up: ::libc::c_int,
    pub fail_on_down: ::libc::c_int,
    pub fail_on_unreachable: ::libc::c_int,
    pub fail_on_pending: ::libc::c_int,
    pub next: *mut Struct_hostdependency_struct,
    pub nexthash: *mut Struct_hostdependency_struct,
}
impl ::std::clone::Clone for Struct_hostdependency_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostdependency_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostdependency = Struct_hostdependency_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_cursor_struct {
    pub host_hashchain_iterator: ::libc::c_int,
    pub current_host_pointer: *mut host,
}
impl ::std::clone::Clone for Struct_host_cursor_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_cursor_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_cursor = Struct_host_cursor_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timed_event_struct {
    pub event_type: ::libc::c_int,
    pub run_time: time_t,
    pub recurring: ::libc::c_int,
    pub event_interval: ::libc::c_ulong,
    pub compensate_for_time_change: ::libc::c_int,
    pub timing_func: *mut ::libc::c_void,
    pub event_data: *mut ::libc::c_void,
    pub event_args: *mut ::libc::c_void,
    pub event_options: ::libc::c_int,
    pub next: *mut Struct_timed_event_struct,
    pub prev: *mut Struct_timed_event_struct,
}
impl ::std::clone::Clone for Struct_timed_event_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timed_event_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timed_event = Struct_timed_event_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_notify_list_struct {
    pub contact: *mut contact,
    pub next: *mut Struct_notify_list_struct,
}
impl ::std::clone::Clone for Struct_notify_list_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_notify_list_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type notification = Struct_notify_list_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_check_result_struct {
    pub object_check_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub check_type: ::libc::c_int,
    pub check_options: ::libc::c_int,
    pub scheduled_check: ::libc::c_int,
    pub reschedule_check: ::libc::c_int,
    pub output_file: *mut ::libc::c_char,
    pub output_file_fp: *mut FILE,
    pub output_file_fd: ::libc::c_int,
    pub latency: ::libc::c_double,
    pub start_time: Struct_timeval,
    pub finish_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub exited_ok: ::libc::c_int,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub next: *mut Struct_check_result_struct,
}
impl ::std::clone::Clone for Struct_check_result_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_check_result_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type check_result = Struct_check_result_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_info_struct {
    pub total_services: ::libc::c_int,
    pub total_scheduled_services: ::libc::c_int,
    pub total_hosts: ::libc::c_int,
    pub total_scheduled_hosts: ::libc::c_int,
    pub average_services_per_host: ::libc::c_double,
    pub average_scheduled_services_per_host: ::libc::c_double,
    pub service_check_interval_total: ::libc::c_ulong,
    pub host_check_interval_total: ::libc::c_ulong,
    pub average_service_execution_time: ::libc::c_double,
    pub average_service_check_interval: ::libc::c_double,
    pub average_host_check_interval: ::libc::c_double,
    pub average_service_inter_check_delay: ::libc::c_double,
    pub average_host_inter_check_delay: ::libc::c_double,
    pub service_inter_check_delay: ::libc::c_double,
    pub host_inter_check_delay: ::libc::c_double,
    pub service_interleave_factor: ::libc::c_int,
    pub max_service_check_spread: ::libc::c_int,
    pub max_host_check_spread: ::libc::c_int,
    pub first_service_check: time_t,
    pub last_service_check: time_t,
    pub first_host_check: time_t,
    pub last_host_check: time_t,
}
impl ::std::clone::Clone for Struct_sched_info_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_info_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sched_info = Struct_sched_info_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_passive_check_result_struct {
    pub object_check_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub check_time: time_t,
    pub latency: ::libc::c_double,
    pub next: *mut Struct_passive_check_result_struct,
}
impl ::std::clone::Clone for Struct_passive_check_result_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_passive_check_result_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type passive_check_result = Struct_passive_check_result_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_circular_buffer_struct {
    pub buffer: *mut *mut ::libc::c_void,
    pub tail: ::libc::c_int,
    pub head: ::libc::c_int,
    pub items: ::libc::c_int,
    pub high: ::libc::c_int,
    pub overflow: ::libc::c_ulong,
    pub buffer_lock: pthread_mutex_t,
}
impl ::std::clone::Clone for Struct_circular_buffer_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_circular_buffer_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type circular_buffer = Struct_circular_buffer_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mmapfile_struct {
    pub path: *mut ::libc::c_char,
    pub mode: ::libc::c_int,
    pub fd: ::libc::c_int,
    pub file_size: ::libc::c_ulong,
    pub current_position: ::libc::c_ulong,
    pub current_line: ::libc::c_ulong,
    pub mmap_buf: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_mmapfile_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mmapfile_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mmapfile = Struct_mmapfile_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dbuf_struct {
    pub buf: *mut ::libc::c_char,
    pub used_size: ::libc::c_ulong,
    pub allocated_size: ::libc::c_ulong,
    pub chunk_size: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_dbuf_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dbuf_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dbuf = Struct_dbuf_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_check_stats_struct {
    pub current_bucket: ::libc::c_int,
    pub bucket: [::libc::c_int; 15usize],
    pub overflow_bucket: ::libc::c_int,
    pub minute_stats: [::libc::c_int; 3usize],
    pub last_update: time_t,
}
impl ::std::clone::Clone for Struct_check_stats_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_check_stats_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type check_stats = Struct_check_stats_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_process_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_nebstruct_process_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_process_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_process_data = Struct_nebstruct_process_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_timed_event_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub event_type: ::libc::c_int,
    pub recurring: ::libc::c_int,
    pub run_time: time_t,
    pub event_data: *mut ::libc::c_void,
    pub event_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_timed_event_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_timed_event_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_timed_event_data = Struct_nebstruct_timed_event_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_log_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub entry_time: time_t,
    pub data_type: ::libc::c_int,
    pub data: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_log_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_log_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_log_data = Struct_nebstruct_log_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_system_command_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub timeout: ::libc::c_int,
    pub command_line: *mut ::libc::c_char,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_system_command_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_system_command_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_system_command_data =
    Struct_nebstruct_system_command_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_event_handler_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub eventhandler_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub state_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub timeout: ::libc::c_int,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_event_handler_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_event_handler_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_event_handler_data = Struct_nebstruct_event_handler_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_host_check_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub current_attempt: ::libc::c_int,
    pub check_type: ::libc::c_int,
    pub max_attempts: ::libc::c_int,
    pub state_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub timeout: ::libc::c_int,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub latency: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub long_output: *mut ::libc::c_char,
    pub perf_data: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_host_check_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_host_check_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_host_check_data = Struct_nebstruct_host_check_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_service_check_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub check_type: ::libc::c_int,
    pub current_attempt: ::libc::c_int,
    pub max_attempts: ::libc::c_int,
    pub state_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub timeout: ::libc::c_int,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub latency: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub long_output: *mut ::libc::c_char,
    pub perf_data: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_service_check_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_service_check_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_service_check_data = Struct_nebstruct_service_check_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_comment_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub comment_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub entry_time: time_t,
    pub author_name: *mut ::libc::c_char,
    pub comment_data: *mut ::libc::c_char,
    pub persistent: ::libc::c_int,
    pub source: ::libc::c_int,
    pub entry_type: ::libc::c_int,
    pub expires: ::libc::c_int,
    pub expire_time: time_t,
    pub comment_id: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_comment_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_comment_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_comment_data = Struct_nebstruct_comment_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_downtime_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub downtime_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub entry_time: time_t,
    pub author_name: *mut ::libc::c_char,
    pub comment_data: *mut ::libc::c_char,
    pub start_time: time_t,
    pub end_time: time_t,
    pub fixed: ::libc::c_int,
    pub duration: ::libc::c_ulong,
    pub triggered_by: ::libc::c_ulong,
    pub downtime_id: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_downtime_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_downtime_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_downtime_data = Struct_nebstruct_downtime_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_flapping_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub flapping_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub percent_change: ::libc::c_double,
    pub high_threshold: ::libc::c_double,
    pub low_threshold: ::libc::c_double,
    pub comment_id: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_flapping_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_flapping_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_flapping_data = Struct_nebstruct_flapping_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_program_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub program_start: time_t,
    pub pid: ::libc::c_int,
    pub daemon_mode: ::libc::c_int,
    pub last_command_check: time_t,
    pub last_log_rotation: time_t,
    pub notifications_enabled: ::libc::c_int,
    pub active_service_checks_enabled: ::libc::c_int,
    pub passive_service_checks_enabled: ::libc::c_int,
    pub active_host_checks_enabled: ::libc::c_int,
    pub passive_host_checks_enabled: ::libc::c_int,
    pub event_handlers_enabled: ::libc::c_int,
    pub flap_detection_enabled: ::libc::c_int,
    pub failure_prediction_enabled: ::libc::c_int,
    pub process_performance_data: ::libc::c_int,
    pub obsess_over_hosts: ::libc::c_int,
    pub obsess_over_services: ::libc::c_int,
    pub modified_host_attributes: ::libc::c_ulong,
    pub modified_service_attributes: ::libc::c_ulong,
    pub global_host_event_handler: *mut ::libc::c_char,
    pub global_service_event_handler: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_program_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_program_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_program_status_data =
    Struct_nebstruct_program_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_host_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_host_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_host_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_host_status_data = Struct_nebstruct_host_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_service_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_service_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_service_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_service_status_data =
    Struct_nebstruct_service_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_contact_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_contact_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_contact_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_contact_status_data =
    Struct_nebstruct_contact_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_notification_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub notification_type: ::libc::c_int,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub reason_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub ack_author: *mut ::libc::c_char,
    pub ack_data: *mut ::libc::c_char,
    pub escalated: ::libc::c_int,
    pub contacts_notified: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_notification_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_notification_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_notification_data = Struct_nebstruct_notification_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_contact_notification_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub notification_type: ::libc::c_int,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub contact_name: *mut ::libc::c_char,
    pub reason_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub ack_author: *mut ::libc::c_char,
    pub ack_data: *mut ::libc::c_char,
    pub escalated: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
    pub contact_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_contact_notification_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_contact_notification_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_contact_notification_data =
    Struct_nebstruct_contact_notification_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_contact_notification_method_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub notification_type: ::libc::c_int,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub contact_name: *mut ::libc::c_char,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub reason_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub ack_author: *mut ::libc::c_char,
    pub ack_data: *mut ::libc::c_char,
    pub escalated: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
    pub contact_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for
 Struct_nebstruct_contact_notification_method_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_nebstruct_contact_notification_method_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_contact_notification_method_data =
    Struct_nebstruct_contact_notification_method_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_program_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_host_attribute: ::libc::c_ulong,
    pub modified_host_attributes: ::libc::c_ulong,
    pub modified_service_attribute: ::libc::c_ulong,
    pub modified_service_attributes: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_program_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_program_data_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_program_data =
    Struct_nebstruct_adaptive_program_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_host_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_attribute: ::libc::c_ulong,
    pub modified_attributes: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_host_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_host_data_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_host_data =
    Struct_nebstruct_adaptive_host_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_service_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_attribute: ::libc::c_ulong,
    pub modified_attributes: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_service_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_service_data_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_service_data =
    Struct_nebstruct_adaptive_service_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_contact_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_attribute: ::libc::c_ulong,
    pub modified_attributes: ::libc::c_ulong,
    pub modified_host_attribute: ::libc::c_ulong,
    pub modified_host_attributes: ::libc::c_ulong,
    pub modified_service_attribute: ::libc::c_ulong,
    pub modified_service_attributes: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_contact_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_contact_data_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_contact_data =
    Struct_nebstruct_adaptive_contact_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_external_command_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub entry_time: time_t,
    pub command_string: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_external_command_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_external_command_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_external_command_data =
    Struct_nebstruct_external_command_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_aggregated_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_nebstruct_aggregated_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_aggregated_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_aggregated_status_data =
    Struct_nebstruct_aggregated_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_retention_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_nebstruct_retention_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_retention_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_retention_data = Struct_nebstruct_retention_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_acknowledgement_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub acknowledgement_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub state: ::libc::c_int,
    pub author_name: *mut ::libc::c_char,
    pub comment_data: *mut ::libc::c_char,
    pub is_sticky: ::libc::c_int,
    pub persistent_comment: ::libc::c_int,
    pub notify_contacts: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_acknowledgement_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_acknowledgement_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_acknowledgement_data =
    Struct_nebstruct_acknowledgement_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_statechange_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub statechange_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub state: ::libc::c_int,
    pub state_type: ::libc::c_int,
    pub current_attempt: ::libc::c_int,
    pub max_attempts: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_statechange_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_statechange_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_statechange_data = Struct_nebstruct_statechange_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pnp_mmapfile_struct {
    pub path: *mut ::libc::c_char,
    pub mode: ::libc::c_int,
    pub fd: ::libc::c_int,
    pub file_size: ::libc::c_ulong,
    pub current_position: ::libc::c_ulong,
    pub current_line: ::libc::c_ulong,
    pub mmap_buf: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_pnp_mmapfile_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pnp_mmapfile_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pnp_mmapfile = Struct_pnp_mmapfile_struct;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __stdinp: *mut FILE;
    pub static mut __stdoutp: *mut FILE;
    pub static mut __stderrp: *mut FILE;
    pub static sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut optarg: *mut ::libc::c_char;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
    pub static mut optreset: ::libc::c_int;
    pub static mut sys_signame: [*const ::libc::c_char; 32usize];
    pub static mut sys_siglist: [*const ::libc::c_char; 32usize];
    pub static mut __mb_cur_max: ::libc::c_int;
    pub static mut tzname: *mut *mut ::libc::c_char;
    pub static mut getdate_err: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut daylight: ::libc::c_int;
}
extern "C" {
    pub fn neb_set_module_info(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                               arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn neb_register_callback(callback_type: ::libc::c_int,
                                 mod_handle: *mut ::libc::c_void,
                                 priority: ::libc::c_int,
                                 callback_func:
                                     ::std::option::Option<extern "C" fn(arg1:
                                                                             ::libc::c_int,
                                                                         arg2:
                                                                             *mut ::libc::c_void)
                                                               ->
                                                                   ::libc::c_int>)
     -> ::libc::c_int;
    pub fn neb_deregister_callback(callback_type: ::libc::c_int,
                                   callback_func:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               ::libc::c_int,
                                                                           arg2:
                                                                               *mut ::libc::c_void)
                                                                 ->
                                                                     ::libc::c_int>)
     -> ::libc::c_int;
    pub fn neb_deregister_module_callbacks(arg1: *mut nebmodule)
     -> ::libc::c_int;
    pub fn renameat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn clearerr(arg1: *mut FILE) -> ();
    pub fn fclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn feof(arg1: *mut FILE) -> ::libc::c_int;
    pub fn ferror(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fflush(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::libc::c_int;
    pub fn fgets(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                 arg3: *mut FILE) -> *mut ::libc::c_char;
    pub fn fopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fputc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn fputs(arg1: *const ::libc::c_char, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn fread(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4: *mut FILE) -> size_t;
    pub fn freopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fseek(arg1: *mut FILE, arg2: ::libc::c_long, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::libc::c_int;
    pub fn ftell(arg1: *mut FILE) -> ::libc::c_long;
    pub fn fwrite(arg1: *const ::libc::c_void, arg2: size_t, arg3: size_t,
                  arg4: *mut FILE) -> size_t;
    pub fn getc(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn gets(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn perror(arg1: *const ::libc::c_char) -> ();
    pub fn printf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn putc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn putchar(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn puts(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn remove(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn rewind(arg1: *mut FILE) -> ();
    pub fn scanf(arg1: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char) -> ();
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                   arg3: ::libc::c_int, arg4: size_t) -> ::libc::c_int;
    pub fn sprintf(arg1: *mut ::libc::c_char,
                   arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ungetc(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn vprintf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsprintf(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn ctermid(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fdopen(arg1: ::libc::c_int, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fileno(arg1: *mut FILE) -> ::libc::c_int;
    pub fn pclose(arg1: *mut FILE) -> ::libc::c_int;
    pub fn popen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut FILE;
    pub fn __srget(arg1: *mut FILE) -> ::libc::c_int;
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                      arg3: va_list) -> ::libc::c_int;
    pub fn __swbuf(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn __sputc(_c: ::libc::c_int, _p: *mut FILE) -> ::libc::c_int;
    pub fn flockfile(arg1: *mut FILE) -> ();
    pub fn ftrylockfile(arg1: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(arg1: *mut FILE) -> ();
    pub fn getc_unlocked(arg1: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn putc_unlocked(arg1: ::libc::c_int, arg2: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(arg1: *mut FILE) -> ::libc::c_int;
    pub fn putw(arg1: ::libc::c_int, arg2: *mut FILE) -> ::libc::c_int;
    pub fn tempnam(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ftello(arg1: *mut FILE) -> off_t;
    pub fn snprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn vscanf(arg1: *const ::libc::c_char, arg2: va_list)
     -> ::libc::c_int;
    pub fn vsnprintf(arg1: *mut ::libc::c_char, arg2: size_t,
                     arg3: *const ::libc::c_char, arg4: va_list)
     -> ::libc::c_int;
    pub fn vsscanf(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: va_list) -> ::libc::c_int;
    pub fn dprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn vdprintf(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: va_list) -> ::libc::c_int;
    pub fn getdelim(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                    arg3: ::libc::c_int, arg4: *mut FILE) -> ssize_t;
    pub fn getline(arg1: *mut *mut ::libc::c_char, arg2: *mut size_t,
                   arg3: *mut FILE) -> ssize_t;
    pub fn asprintf(arg1: *mut *mut ::libc::c_char,
                    arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn ctermid_r(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::libc::c_char;
    pub fn fmtcheck(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn fpurge(arg1: *mut FILE) -> ::libc::c_int;
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::libc::c_char,
                     arg3: ::libc::c_int) -> ();
    pub fn setlinebuf(arg1: *mut FILE) -> ::libc::c_int;
    pub fn vasprintf(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char, arg3: va_list)
     -> ::libc::c_int;
    pub fn zopen(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                 arg3: ::libc::c_int) -> *mut FILE;
    pub fn funopen(arg1: *const ::libc::c_void,
                   arg2:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *mut ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg3:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_char,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2: fpos_t,
                                                           arg3:
                                                               ::libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut FILE;
    pub fn __sprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                         arg3: size_t, arg4: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn __snprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                          arg3: ::libc::c_int, arg4: size_t,
                          arg5: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn __vsprintf_chk(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                          arg3: size_t, arg4: *const ::libc::c_char,
                          arg5: va_list) -> ::libc::c_int;
    pub fn __vsnprintf_chk(arg1: *mut ::libc::c_char, arg2: size_t,
                           arg3: ::libc::c_int, arg4: size_t,
                           arg5: *const ::libc::c_char, arg6: va_list)
     -> ::libc::c_int;
    pub fn __error() -> *mut ::libc::c_int;
    pub fn getattrlistbulk(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                           arg3: *mut ::libc::c_void, arg4: size_t,
                           arg5: uint64_t) -> ::libc::c_int;
    pub fn faccessat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                     arg3: ::libc::c_int, arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn fchownat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: uid_t, arg4: gid_t, arg5: ::libc::c_int)
     -> ::libc::c_int;
    pub fn linkat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int, arg4: *const ::libc::c_char,
                  arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn readlinkat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                      arg3: *mut ::libc::c_char, arg4: size_t) -> ssize_t;
    pub fn symlinkat(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unlinkat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn getattrlistat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                         arg3: *mut ::libc::c_void, arg4: *mut ::libc::c_void,
                         arg5: size_t, arg6: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn _exit(arg1: ::libc::c_int) -> ();
    pub fn access(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn alarm(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn chdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn chown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn close(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn execl(arg1: *const ::libc::c_char,
                 arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execle(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execlp(arg1: *const ::libc::c_char,
                  arg2: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execv(arg1: *const ::libc::c_char,
                 arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execve(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char,
                  arg3: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execvp(arg1: *const ::libc::c_char,
                  arg2: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fork() -> pid_t;
    pub fn fpathconf(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_long;
    pub fn getcwd(arg1: *mut ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn getegid() -> gid_t;
    pub fn geteuid() -> uid_t;
    pub fn getgid() -> gid_t;
    pub fn getgroups(arg1: ::libc::c_int, arg2: *mut gid_t) -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_char;
    pub fn getpgrp() -> pid_t;
    pub fn getpid() -> pid_t;
    pub fn getppid() -> pid_t;
    pub fn getuid() -> uid_t;
    pub fn isatty(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn link(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn lseek(arg1: ::libc::c_int, arg2: off_t, arg3: ::libc::c_int)
     -> off_t;
    pub fn pathconf(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_long;
    pub fn pause() -> ::libc::c_int;
    pub fn pipe(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn read(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t)
     -> ssize_t;
    pub fn rmdir(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::libc::c_int;
    pub fn setsid() -> pid_t;
    pub fn setuid(arg1: uid_t) -> ::libc::c_int;
    pub fn sleep(arg1: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sysconf(arg1: ::libc::c_int) -> ::libc::c_long;
    pub fn tcgetpgrp(arg1: ::libc::c_int) -> pid_t;
    pub fn tcsetpgrp(arg1: ::libc::c_int, arg2: pid_t) -> ::libc::c_int;
    pub fn ttyname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ttyname_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> ::libc::c_int;
    pub fn unlink(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn write(arg1: ::libc::c_int, arg2: *const ::libc::c_void,
                 arg3: size_t) -> ssize_t;
    pub fn confstr(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn getopt(arg1: ::libc::c_int, arg2: *const *mut ::libc::c_char,
                  arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn brk(arg1: *const ::libc::c_void) -> *mut ::libc::c_void;
    pub fn chroot(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn crypt(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn encrypt(arg1: *mut ::libc::c_char, arg2: ::libc::c_int) -> ();
    pub fn fchdir(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn getpgid(arg1: pid_t) -> pid_t;
    pub fn getsid(arg1: pid_t) -> pid_t;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getpass(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getwd(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn lchown(arg1: *const ::libc::c_char, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn lockf(arg1: ::libc::c_int, arg2: ::libc::c_int, arg3: off_t)
     -> ::libc::c_int;
    pub fn nice(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn pread(arg1: ::libc::c_int, arg2: *mut ::libc::c_void, arg3: size_t,
                 arg4: off_t) -> ssize_t;
    pub fn pwrite(arg1: ::libc::c_int, arg2: *const ::libc::c_void,
                  arg3: size_t, arg4: off_t) -> ssize_t;
    pub fn sbrk(arg1: ::libc::c_int) -> *mut ::libc::c_void;
    pub fn setpgrp() -> pid_t;
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::libc::c_int;
    pub fn swab(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                arg3: ssize_t) -> ();
    pub fn sync() -> ();
    pub fn truncate(arg1: *const ::libc::c_char, arg2: off_t)
     -> ::libc::c_int;
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
    pub fn usleep(arg1: useconds_t) -> ::libc::c_int;
    pub fn vfork() -> pid_t;
    pub fn fsync(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ftruncate(arg1: ::libc::c_int, arg2: off_t) -> ::libc::c_int;
    pub fn getlogin_r(arg1: *mut ::libc::c_char, arg2: size_t)
     -> ::libc::c_int;
    pub fn fchown(arg1: ::libc::c_int, arg2: uid_t, arg3: gid_t)
     -> ::libc::c_int;
    pub fn gethostname(arg1: *mut ::libc::c_char, arg2: size_t)
     -> ::libc::c_int;
    pub fn readlink(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char,
                    arg3: size_t) -> ssize_t;
    pub fn setegid(arg1: gid_t) -> ::libc::c_int;
    pub fn seteuid(arg1: uid_t) -> ::libc::c_int;
    pub fn symlink(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn pselect(arg1: ::libc::c_int, arg2: *mut fd_set, arg3: *mut fd_set,
                   arg4: *mut fd_set, arg5: *const Struct_timespec,
                   arg6: *const sigset_t) -> ::libc::c_int;
    pub fn select(arg1: ::libc::c_int, arg2: *mut fd_set, arg3: *mut fd_set,
                  arg4: *mut fd_set, arg5: *mut Struct_timeval)
     -> ::libc::c_int;
    pub fn _Exit(arg1: ::libc::c_int) -> ();
    pub fn accessx_np(arg1: *const Struct_accessx_descriptor, arg2: size_t,
                      arg3: *mut ::libc::c_int, arg4: uid_t) -> ::libc::c_int;
    pub fn acct(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn add_profil(arg1: *mut ::libc::c_char, arg2: size_t,
                      arg3: ::libc::c_ulong, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn endusershell() -> ();
    pub fn execvP(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fflagstostr(arg1: ::libc::c_ulong) -> *mut ::libc::c_char;
    pub fn getdomainname(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getgrouplist(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                        arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn gethostuuid(arg1: uuid_t, arg2: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn getmode(arg1: *const ::libc::c_void, arg2: mode_t) -> mode_t;
    pub fn getpeereid(arg1: ::libc::c_int, arg2: *mut uid_t, arg3: *mut gid_t)
     -> ::libc::c_int;
    pub fn getsgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t)
     -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_char;
    pub fn getwgroups_np(arg1: *mut ::libc::c_int, arg2: uuid_t)
     -> ::libc::c_int;
    pub fn initgroups(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn iruserok(arg1: ::libc::c_ulong, arg2: ::libc::c_int,
                    arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn iruserok_sa(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                       arg3: ::libc::c_int, arg4: *const ::libc::c_char,
                       arg5: *const ::libc::c_char) -> ::libc::c_int;
    pub fn issetugid() -> ::libc::c_int;
    pub fn mkdtemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mknod(arg1: *const ::libc::c_char, arg2: mode_t, arg3: dev_t)
     -> ::libc::c_int;
    pub fn mkpath_np(path: *const ::libc::c_char, omode: mode_t)
     -> ::libc::c_int;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(arg1: *mut ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn nfssvc(arg1: ::libc::c_int, arg2: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn profil(arg1: *mut ::libc::c_char, arg2: size_t,
                  arg3: ::libc::c_ulong, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::libc::c_int;
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t)
     -> ::libc::c_int;
    pub fn rcmd(arg1: *mut *mut ::libc::c_char, arg2: ::libc::c_int,
                arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                arg5: *const ::libc::c_char, arg6: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn rcmd_af(arg1: *mut *mut ::libc::c_char, arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char,
                   arg5: *const ::libc::c_char, arg6: *mut ::libc::c_int,
                   arg7: ::libc::c_int) -> ::libc::c_int;
    pub fn reboot(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn revoke(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rresvport(arg1: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn rresvport_af(arg1: *mut ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn ruserok(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                   arg3: *const ::libc::c_char, arg4: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn setdomainname(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setgroups(arg1: ::libc::c_int, arg2: *const gid_t)
     -> ::libc::c_int;
    pub fn sethostid(arg1: ::libc::c_long) -> ();
    pub fn sethostname(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char) -> ();
    pub fn setlogin(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn setmode(arg1: *const ::libc::c_char) -> *mut ::libc::c_void;
    pub fn setrgid(arg1: gid_t) -> ::libc::c_int;
    pub fn setruid(arg1: uid_t) -> ::libc::c_int;
    pub fn setsgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn setusershell() -> ();
    pub fn setwgroups_np(arg1: ::libc::c_int, arg2: uuid_t) -> ::libc::c_int;
    pub fn strtofflags(arg1: *mut *mut ::libc::c_char,
                       arg2: *mut ::libc::c_ulong, arg3: *mut ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn swapon(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn syscall(arg1: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn undelete(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unwhiteout(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fgetattrlist(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void, arg4: size_t,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn fsetattrlist(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                        arg3: *mut ::libc::c_void, arg4: size_t,
                        arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn getattrlist(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void, arg4: size_t,
                       arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn setattrlist(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_void,
                       arg3: *mut ::libc::c_void, arg4: size_t,
                       arg5: ::libc::c_uint) -> ::libc::c_int;
    pub fn exchangedata(arg1: *const ::libc::c_char,
                        arg2: *const ::libc::c_char, arg3: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn getdirentriesattr(arg1: ::libc::c_int, arg2: *mut ::libc::c_void,
                             arg3: *mut ::libc::c_void, arg4: size_t,
                             arg5: *mut ::libc::c_uint,
                             arg6: *mut ::libc::c_uint,
                             arg7: *mut ::libc::c_uint, arg8: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn searchfs(arg1: *const ::libc::c_char,
                    arg2: *mut Struct_fssearchblock,
                    arg3: *mut ::libc::c_ulong, arg4: ::libc::c_uint,
                    arg5: ::libc::c_uint, arg6: *mut Struct_searchstate)
     -> ::libc::c_int;
    pub fn fsctl(arg1: *const ::libc::c_char, arg2: ::libc::c_ulong,
                 arg3: *mut ::libc::c_void, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn ffsctl(arg1: ::libc::c_int, arg2: ::libc::c_ulong,
                  arg3: *mut ::libc::c_void, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn fsync_volume_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sync_volume_np(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn closelog() -> ();
    pub fn openlog(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                   arg3: ::libc::c_int) -> ();
    pub fn setlogmask(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn syslog(arg1: ::libc::c_int, arg2: *const ::libc::c_char, ...)
     -> ();
    pub fn vsyslog(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                   arg3: __darwin_va_list) -> ();
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn getpriority(arg1: ::libc::c_int, arg2: id_t) -> ::libc::c_int;
    pub fn getiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getrlimit(arg1: ::libc::c_int, arg2: *mut Struct_rlimit)
     -> ::libc::c_int;
    pub fn getrusage(arg1: ::libc::c_int, arg2: *mut Struct_rusage)
     -> ::libc::c_int;
    pub fn setpriority(arg1: ::libc::c_int, arg2: id_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setrlimit(arg1: ::libc::c_int, arg2: *const Struct_rlimit)
     -> ::libc::c_int;
    pub fn wait(arg1: *mut ::libc::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int)
     -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(arg1: *mut ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *mut Struct_rusage) -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int,
                 arg4: *mut Struct_rusage) -> pid_t;
    pub fn chmod(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn fchmod(arg1: ::libc::c_int, arg2: mode_t) -> ::libc::c_int;
    pub fn fstat(arg1: ::libc::c_int, arg2: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn lstat(arg1: *const ::libc::c_char, arg2: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn mkdir(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn mkfifo(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn stat(arg1: *const ::libc::c_char, arg2: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn umask(arg1: mode_t) -> mode_t;
    pub fn fchmodat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                    arg3: mode_t, arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn fstatat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                   arg3: *mut Struct_stat, arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn mkdirat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                   arg3: mode_t) -> ::libc::c_int;
    pub fn chflags(arg1: *const ::libc::c_char, arg2: __uint32_t)
     -> ::libc::c_int;
    pub fn chmodx_np(arg1: *const ::libc::c_char, arg2: filesec_t)
     -> ::libc::c_int;
    pub fn fchflags(arg1: ::libc::c_int, arg2: __uint32_t) -> ::libc::c_int;
    pub fn fchmodx_np(arg1: ::libc::c_int, arg2: filesec_t) -> ::libc::c_int;
    pub fn fstatx_np(arg1: ::libc::c_int, arg2: *mut Struct_stat,
                     arg3: filesec_t) -> ::libc::c_int;
    pub fn lchflags(arg1: *const ::libc::c_char, arg2: __uint32_t)
     -> ::libc::c_int;
    pub fn lchmod(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn lstatx_np(arg1: *const ::libc::c_char, arg2: *mut Struct_stat,
                     arg3: filesec_t) -> ::libc::c_int;
    pub fn mkdirx_np(arg1: *const ::libc::c_char, arg2: filesec_t)
     -> ::libc::c_int;
    pub fn mkfifox_np(arg1: *const ::libc::c_char, arg2: filesec_t)
     -> ::libc::c_int;
    pub fn statx_np(arg1: *const ::libc::c_char, arg2: *mut Struct_stat,
                    arg3: filesec_t) -> ::libc::c_int;
    pub fn umaskx_np(arg1: filesec_t) -> ::libc::c_int;
    pub fn fstatx64_np(arg1: ::libc::c_int, arg2: *mut Struct_stat64,
                       arg3: filesec_t) -> ::libc::c_int;
    pub fn lstatx64_np(arg1: *const ::libc::c_char, arg2: *mut Struct_stat64,
                       arg3: filesec_t) -> ::libc::c_int;
    pub fn statx64_np(arg1: *const ::libc::c_char, arg2: *mut Struct_stat64,
                      arg3: filesec_t) -> ::libc::c_int;
    pub fn fstat64(arg1: ::libc::c_int, arg2: *mut Struct_stat64)
     -> ::libc::c_int;
    pub fn lstat64(arg1: *const ::libc::c_char, arg2: *mut Struct_stat64)
     -> ::libc::c_int;
    pub fn stat64(arg1: *const ::libc::c_char, arg2: *mut Struct_stat64)
     -> ::libc::c_int;
    pub fn raise(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn bsd_signal(arg1: ::libc::c_int,
                      arg2:
                          ::std::option::Option<extern "C" fn(arg1:
                                                                  ::libc::c_int)
                                                    -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn kill(arg1: pid_t, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(arg1: pid_t, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_kill(arg1: pthread_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_sigmask(arg1: ::libc::c_int, arg2: *const sigset_t,
                           arg3: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaction(arg1: ::libc::c_int, arg2: *const Struct_sigaction,
                     arg3: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t)
     -> ::libc::c_int;
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sighold(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigignore(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn siginterrupt(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(arg1: *const sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigpause(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigpending(arg1: *mut sigset_t) -> ::libc::c_int;
    pub fn sigprocmask(arg1: ::libc::c_int, arg2: *const sigset_t,
                       arg3: *mut sigset_t) -> ::libc::c_int;
    pub fn sigrelse(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigset(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn sigsuspend(arg1: *const sigset_t) -> ::libc::c_int;
    pub fn sigwait(arg1: *const sigset_t, arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn psignal(arg1: ::libc::c_uint, arg2: *const ::libc::c_char) -> ();
    pub fn sigblock(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sigvec(arg1: ::libc::c_int, arg2: *mut Struct_sigvec,
                  arg3: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn __sigbits(__signo: ::libc::c_int) -> ::libc::c_int;
    pub fn alloca(arg1: size_t) -> *mut ::libc::c_void;
    pub fn abort() -> ();
    pub fn abs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn atof(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(arg1: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn bsearch(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t, arg4: size_t,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *const ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut ::libc::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
    pub fn div(arg1: ::libc::c_int, arg2: ::libc::c_int) -> div_t;
    pub fn exit(arg1: ::libc::c_int) -> ();
    pub fn free(arg1: *mut ::libc::c_void) -> ();
    pub fn getenv(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn labs(arg1: ::libc::c_long) -> ::libc::c_long;
    pub fn ldiv(arg1: ::libc::c_long, arg2: ::libc::c_long) -> ldiv_t;
    pub fn llabs(arg1: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn lldiv(arg1: ::libc::c_longlong, arg2: ::libc::c_longlong)
     -> lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn mblen(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                  arg3: size_t) -> ::libc::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::libc::c_void, arg2: size_t,
                          arg3: size_t) -> ::libc::c_int;
    pub fn qsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn rand() -> ::libc::c_int;
    pub fn realloc(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn srand(arg1: ::libc::c_uint) -> ();
    pub fn strtod(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_double;
    pub fn strtof(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_float;
    pub fn strtol(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn strtold(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtoll(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoul(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoull(arg1: *const ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn system(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn wcstombs(arg1: *mut ::libc::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) -> ::libc::c_int;
    pub fn a64l(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn drand48() -> ::libc::c_double;
    pub fn ecvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn erand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn fcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn grantpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn initstate(arg1: ::libc::c_uint, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> *mut ::libc::c_char;
    pub fn jrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn l64a(arg1: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn lcong48(arg1: *mut ::libc::c_ushort) -> ();
    pub fn lrand48() -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn nrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn posix_openpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ptsname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn putenv(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn random() -> ::libc::c_long;
    pub fn rand_r(arg1: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn realpath(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn seed48(arg1: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn setenv(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setstate(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn srand48(arg1: ::libc::c_long) -> ();
    pub fn srandom(arg1: ::libc::c_uint) -> ();
    pub fn unlockpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn unsetenv(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::libc::c_uchar,
                                arg2: ::libc::c_int) -> ();
    pub fn arc4random_buf(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn arc4random_stir() -> ();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::libc::c_void) -> ::libc::c_int;
    pub fn bsearch_b(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                     arg3: size_t, arg4: size_t, arg5: ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cgetcap(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn cgetclose() -> ::libc::c_int;
    pub fn cgetent(arg1: *mut *mut ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char,
                   arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::libc::c_char,
                     arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetmatch(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cgetnext(arg1: *mut *mut ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetnum(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn cgetset(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetstr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetustr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn daemon(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::libc::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t, buf: *mut ::libc::c_char,
                     len: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn getbsize(arg1: *mut ::libc::c_int, arg2: *mut ::libc::c_long)
     -> *mut ::libc::c_char;
    pub fn getloadavg(arg1: *mut ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getprogname() -> *const ::libc::c_char;
    pub fn heapsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                    arg4:
                        ::std::option::Option<extern "C" fn(arg1:
                                                                *const ::libc::c_void,
                                                            arg2:
                                                                *const ::libc::c_void)
                                                  -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn heapsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                      arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn mergesort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                     arg4:
                         ::std::option::Option<extern "C" fn(arg1:
                                                                 *const ::libc::c_void,
                                                             arg2:
                                                                 *const ::libc::c_void)
                                                   -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn mergesort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                       arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn psort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn psort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn psort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn qsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn qsort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn radixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn setprogname(arg1: *const ::libc::c_char) -> ();
    pub fn sradixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                      arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sranddev() -> ();
    pub fn srandomdev() -> ();
    pub fn reallocf(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn strtoq(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn strtouq(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn closedir(arg1: *mut DIR) -> ::libc::c_int;
    pub fn opendir(arg1: *const ::libc::c_char) -> *mut DIR;
    pub fn readdir(arg1: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(arg1: *mut DIR, arg2: *mut Struct_dirent,
                     arg3: *mut *mut Struct_dirent) -> ::libc::c_int;
    pub fn rewinddir(arg1: *mut DIR) -> ();
    pub fn seekdir(arg1: *mut DIR, arg2: ::libc::c_long) -> ();
    pub fn telldir(arg1: *mut DIR) -> ::libc::c_long;
    pub fn fdopendir(arg1: ::libc::c_int) -> *mut DIR;
    pub fn alphasort(arg1: *mut *const Struct_dirent,
                     arg2: *mut *const Struct_dirent) -> ::libc::c_int;
    pub fn dirfd(dirp: *mut DIR) -> ::libc::c_int;
    pub fn scandir(arg1: *const ::libc::c_char,
                   arg2: *mut *mut *mut Struct_dirent,
                   arg3:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *const Struct_dirent)
                                                 -> ::libc::c_int>,
                   arg4:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut *const Struct_dirent,
                                                           arg2:
                                                               *mut *const Struct_dirent)
                                                 -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn scandir_b(arg1: *const ::libc::c_char,
                     arg2: *mut *mut *mut Struct_dirent, arg3: ::libc::c_void,
                     arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn getdirentries(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                         arg3: ::libc::c_int, arg4: *mut ::libc::c_long)
     -> ::libc::c_int;
    pub fn __opendir2(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut DIR;
    pub fn memchr(arg1: *const ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> ::libc::c_int;
    pub fn memcpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn memmove(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t) -> *mut ::libc::c_void;
    pub fn memset(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                  arg3: size_t) -> *mut ::libc::c_void;
    pub fn strcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcoll(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strcspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strerror(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strlen(arg1: *const ::libc::c_char) -> size_t;
    pub fn strncat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strncmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> ::libc::c_int;
    pub fn strncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strpbrk(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strrchr(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strspn(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> size_t;
    pub fn strstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strxfrm(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strtok_r(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strerror_r(arg1: ::libc::c_int, arg2: *mut ::libc::c_char,
                      arg3: size_t) -> ::libc::c_int;
    pub fn strdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn memccpy(arg1: *mut ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: ::libc::c_int, arg4: size_t) -> *mut ::libc::c_void;
    pub fn stpcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpncpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strndup(arg1: *const ::libc::c_char, arg2: size_t)
     -> *mut ::libc::c_char;
    pub fn strnlen(arg1: *const ::libc::c_char, arg2: size_t) -> size_t;
    pub fn strsignal(sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn memset_s(arg1: *mut ::libc::c_void, arg2: rsize_t,
                    arg3: ::libc::c_int, arg4: rsize_t) -> errno_t;
    pub fn memmem(arg1: *const ::libc::c_void, arg2: size_t,
                  arg3: *const ::libc::c_void, arg4: size_t)
     -> *mut ::libc::c_void;
    pub fn memset_pattern4(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn memset_pattern8(arg1: *mut ::libc::c_void,
                           arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn memset_pattern16(arg1: *mut ::libc::c_void,
                            arg2: *const ::libc::c_void, arg3: size_t) -> ();
    pub fn strcasestr(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strnstr(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> *mut ::libc::c_char;
    pub fn strlcat(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strlcpy(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: size_t) -> size_t;
    pub fn strmode(arg1: ::libc::c_int, arg2: *mut ::libc::c_char) -> ();
    pub fn strsep(arg1: *mut *mut ::libc::c_char, arg2: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn bcmp(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                arg3: size_t) -> ::libc::c_int;
    pub fn bcopy(arg1: *const ::libc::c_void, arg2: *mut ::libc::c_void,
                 arg3: size_t) -> ();
    pub fn bzero(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn index(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(arg1: *const ::libc::c_char, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(arg1: *const ::libc::c_char,
                      arg2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(arg1: *const ::libc::c_char,
                       arg2: *const ::libc::c_char, arg3: size_t)
     -> ::libc::c_int;
    pub fn ffsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn ffsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn fls(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn flsl(arg1: ::libc::c_long) -> ::libc::c_int;
    pub fn flsll(arg1: ::libc::c_longlong) -> ::libc::c_int;
    pub fn sched_yield() -> ::libc::c_int;
    pub fn sched_get_priority_min(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn sched_get_priority_max(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn asctime(arg1: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn clock() -> clock_t;
    pub fn ctime(arg1: *const time_t) -> *mut ::libc::c_char;
    pub fn difftime(arg1: time_t, arg2: time_t) -> ::libc::c_double;
    pub fn getdate(arg1: *const ::libc::c_char) -> *mut Struct_tm;
    pub fn gmtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn localtime(arg1: *const time_t) -> *mut Struct_tm;
    pub fn mktime(arg1: *mut Struct_tm) -> time_t;
    pub fn strftime(arg1: *mut ::libc::c_char, arg2: size_t,
                    arg3: *const ::libc::c_char, arg4: *const Struct_tm)
     -> size_t;
    pub fn strptime(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut Struct_tm) -> *mut ::libc::c_char;
    pub fn time(arg1: *mut time_t) -> time_t;
    pub fn tzset() -> ();
    pub fn asctime_r(arg1: *const Struct_tm, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(arg1: *const time_t, arg2: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn posix2time(arg1: time_t) -> time_t;
    pub fn tzsetwall() -> ();
    pub fn time2posix(arg1: time_t) -> time_t;
    pub fn timelocal(arg1: *mut Struct_tm) -> time_t;
    pub fn timegm(arg1: *mut Struct_tm) -> time_t;
    pub fn nanosleep(arg1: *const Struct_timespec, arg2: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn qos_class_self() -> qos_class_t;
    pub fn qos_class_main() -> qos_class_t;
    pub fn pthread_attr_set_qos_class_np(__attr: *mut pthread_attr_t,
                                         __qos_class: qos_class_t,
                                         __relative_priority: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_get_qos_class_np(__attr: *mut pthread_attr_t,
                                         __qos_class: *mut qos_class_t,
                                         __relative_priority:
                                             *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_set_qos_class_self_np(__qos_class: qos_class_t,
                                         __relative_priority: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_get_qos_class_np(__pthread: pthread_t,
                                    __qos_class: *mut qos_class_t,
                                    __relative_priority: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_override_qos_class_start_np(__pthread: pthread_t,
                                               __qos_class: qos_class_t,
                                               __relative_priority:
                                                   ::libc::c_int)
     -> pthread_override_t;
    pub fn pthread_override_qos_class_end_np(__override: pthread_override_t)
     -> ::libc::c_int;
    pub fn pthread_atfork(arg1: ::std::option::Option<extern "C" fn() -> ()>,
                          arg2: ::std::option::Option<extern "C" fn() -> ()>,
                          arg3: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_getdetachstate(arg1: *const pthread_attr_t,
                                       arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getguardsize(arg1: *const pthread_attr_t,
                                     arg2: *mut size_t) -> ::libc::c_int;
    pub fn pthread_attr_getinheritsched(arg1: *const pthread_attr_t,
                                        arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getschedparam(arg1: *const pthread_attr_t,
                                      arg2: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_attr_getschedpolicy(arg1: *const pthread_attr_t,
                                       arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getscope(arg1: *const pthread_attr_t,
                                 arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_getstack(arg1: *const pthread_attr_t,
                                 arg2: *mut *mut ::libc::c_void,
                                 arg3: *mut size_t) -> ::libc::c_int;
    pub fn pthread_attr_getstackaddr(arg1: *const pthread_attr_t,
                                     arg2: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_attr_getstacksize(arg1: *const pthread_attr_t,
                                     arg2: *mut size_t) -> ::libc::c_int;
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_setdetachstate(arg1: *mut pthread_attr_t,
                                       arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_setguardsize(arg1: *mut pthread_attr_t, arg2: size_t)
     -> ::libc::c_int;
    pub fn pthread_attr_setinheritsched(arg1: *mut pthread_attr_t,
                                        arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_setschedparam(arg1: *mut pthread_attr_t,
                                      arg2: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_attr_setschedpolicy(arg1: *mut pthread_attr_t,
                                       arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_setscope(arg1: *mut pthread_attr_t,
                                 arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_setstack(arg1: *mut pthread_attr_t,
                                 arg2: *mut ::libc::c_void, arg3: size_t)
     -> ::libc::c_int;
    pub fn pthread_attr_setstackaddr(arg1: *mut pthread_attr_t,
                                     arg2: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_attr_setstacksize(arg1: *mut pthread_attr_t, arg2: size_t)
     -> ::libc::c_int;
    pub fn pthread_cancel(arg1: pthread_t) -> ::libc::c_int;
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_init(arg1: *mut pthread_cond_t,
                             arg2: *const pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_timedwait(arg1: *mut pthread_cond_t,
                                  arg2: *mut pthread_mutex_t,
                                  arg3: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_cond_wait(arg1: *mut pthread_cond_t,
                             arg2: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_getpshared(arg1: *const pthread_condattr_t,
                                       arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_condattr_setpshared(arg1: *mut pthread_condattr_t,
                                       arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_create(arg1: *mut pthread_t, arg2: *const pthread_attr_t,
                          arg3:
                              ::std::option::Option<extern "C" fn(arg1:
                                                                      *mut ::libc::c_void)
                                                        ->
                                                            *mut ::libc::c_void>,
                          arg4: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pthread_detach(arg1: pthread_t) -> ::libc::c_int;
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::libc::c_int;
    pub fn pthread_exit(arg1: *mut ::libc::c_void) -> ();
    pub fn pthread_getconcurrency() -> ::libc::c_int;
    pub fn pthread_getschedparam(arg1: pthread_t, arg2: *mut ::libc::c_int,
                                 arg3: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::libc::c_void;
    pub fn pthread_join(arg1: pthread_t, arg2: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_key_create(arg1: *mut pthread_key_t,
                              arg2:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut ::libc::c_void)
                                                            -> ()>)
     -> ::libc::c_int;
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::libc::c_int;
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutex_getprioceiling(arg1: *const pthread_mutex_t,
                                        arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutex_init(arg1: *mut pthread_mutex_t,
                              arg2: *const pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutex_setprioceiling(arg1: *mut pthread_mutex_t,
                                        arg2: ::libc::c_int,
                                        arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getprioceiling(arg1: *const pthread_mutexattr_t,
                                            arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getprotocol(arg1: *const pthread_mutexattr_t,
                                         arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getpshared(arg1: *const pthread_mutexattr_t,
                                        arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_gettype(arg1: *const pthread_mutexattr_t,
                                     arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprioceiling(arg1: *mut pthread_mutexattr_t,
                                            arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprotocol(arg1: *mut pthread_mutexattr_t,
                                         arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setpshared(arg1: *mut pthread_mutexattr_t,
                                        arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutexattr_settype(arg1: *mut pthread_mutexattr_t,
                                     arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_once(arg1: *mut pthread_once_t,
                        arg2: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_init(arg1: *mut pthread_rwlock_t,
                               arg2: *const pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_getpshared(arg1: *const pthread_rwlockattr_t,
                                         arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_setpshared(arg1: *mut pthread_rwlockattr_t,
                                         arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_setcancelstate(arg1: ::libc::c_int,
                                  arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_setcanceltype(arg1: ::libc::c_int,
                                 arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_setconcurrency(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_setschedparam(arg1: pthread_t, arg2: ::libc::c_int,
                                 arg3: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_setspecific(arg1: pthread_key_t,
                               arg2: *const ::libc::c_void) -> ::libc::c_int;
    pub fn pthread_testcancel() -> ();
    pub fn pthread_is_threaded_np() -> ::libc::c_int;
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t)
     -> ::libc::c_int;
    pub fn pthread_getname_np(arg1: pthread_t, arg2: *mut ::libc::c_char,
                              arg3: size_t) -> ::libc::c_int;
    pub fn pthread_setname_np(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pthread_main_np() -> ::libc::c_int;
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> size_t;
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::libc::c_void;
    pub fn pthread_cond_signal_thread_np(arg1: *mut pthread_cond_t,
                                         arg2: pthread_t) -> ::libc::c_int;
    pub fn pthread_cond_timedwait_relative_np(arg1: *mut pthread_cond_t,
                                              arg2: *mut pthread_mutex_t,
                                              arg3: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_create_suspended_np(arg1: *mut pthread_t,
                                       arg2: *const pthread_attr_t,
                                       arg3:
                                           ::std::option::Option<extern "C" fn(arg1:
                                                                                   *mut ::libc::c_void)
                                                                     ->
                                                                         *mut ::libc::c_void>,
                                       arg4: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
    pub fn pthread_yield_np() -> ();
    pub fn getopt_long(arg1: ::libc::c_int, arg2: *const *mut ::libc::c_char,
                       arg3: *const ::libc::c_char,
                       arg4: *const Struct_option, arg5: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn getopt_long_only(arg1: ::libc::c_int,
                            arg2: *const *mut ::libc::c_char,
                            arg3: *const ::libc::c_char,
                            arg4: *const Struct_option,
                            arg5: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn getgrgid(arg1: gid_t) -> *mut Struct_group;
    pub fn getgrnam(arg1: *const ::libc::c_char) -> *mut Struct_group;
    pub fn getgrgid_r(arg1: gid_t, arg2: *mut Struct_group,
                      arg3: *mut ::libc::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn getgrnam_r(arg1: *const ::libc::c_char, arg2: *mut Struct_group,
                      arg3: *mut ::libc::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn getgrent() -> *mut Struct_group;
    pub fn setgrent() -> ();
    pub fn endgrent() -> ();
    pub fn uuid_clear(uu: uuid_t) -> ();
    pub fn uuid_compare(uu1: uuid_t, uu2: uuid_t) -> ::libc::c_int;
    pub fn uuid_copy(dst: uuid_t, src: uuid_t) -> ();
    pub fn uuid_generate(out: uuid_t) -> ();
    pub fn uuid_generate_random(out: uuid_t) -> ();
    pub fn uuid_generate_time(out: uuid_t) -> ();
    pub fn uuid_is_null(uu: uuid_t) -> ::libc::c_int;
    pub fn uuid_parse(_in: uuid_string_t, uu: uuid_t) -> ::libc::c_int;
    pub fn uuid_unparse(uu: uuid_t, out: uuid_string_t) -> ();
    pub fn uuid_unparse_lower(uu: uuid_t, out: uuid_string_t) -> ();
    pub fn uuid_unparse_upper(uu: uuid_t, out: uuid_string_t) -> ();
    pub fn group_from_gid(arg1: gid_t, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn getgruuid(arg1: uuid_t) -> *mut Struct_group;
    pub fn getgruuid_r(arg1: uuid_t, arg2: *mut Struct_group,
                       arg3: *mut ::libc::c_char, arg4: size_t,
                       arg5: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn setgrfile(arg1: *const ::libc::c_char) -> ();
    pub fn setgroupent(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn getpwuid(arg1: uid_t) -> *mut Struct_passwd;
    pub fn getpwnam(arg1: *const ::libc::c_char) -> *mut Struct_passwd;
    pub fn getpwuid_r(arg1: uid_t, arg2: *mut Struct_passwd,
                      arg3: *mut ::libc::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn getpwnam_r(arg1: *const ::libc::c_char, arg2: *mut Struct_passwd,
                      arg3: *mut ::libc::c_char, arg4: size_t,
                      arg5: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn getpwent() -> *mut Struct_passwd;
    pub fn setpwent() -> ();
    pub fn endpwent() -> ();
    pub fn setpassent(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn user_from_uid(arg1: uid_t, arg2: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn getpwuuid(arg1: uuid_t) -> *mut Struct_passwd;
    pub fn getpwuuid_r(arg1: uuid_t, arg2: *mut Struct_passwd,
                       arg3: *mut ::libc::c_char, arg4: size_t,
                       arg5: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn open(arg1: *const ::libc::c_char, arg2: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn openat(arg1: ::libc::c_int, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn creat(arg1: *const ::libc::c_char, arg2: mode_t) -> ::libc::c_int;
    pub fn fcntl(arg1: ::libc::c_int, arg2: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn openx_np(arg1: *const ::libc::c_char, arg2: ::libc::c_int,
                    arg3: filesec_t) -> ::libc::c_int;
    pub fn open_dprotected_np(arg1: *const ::libc::c_char,
                              arg2: ::libc::c_int, arg3: ::libc::c_int,
                              arg4: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn flock(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn filesec_init() -> filesec_t;
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
    pub fn filesec_free(arg1: filesec_t) -> ();
    pub fn filesec_get_property(arg1: filesec_t, arg2: filesec_property_t,
                                arg3: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn filesec_query_property(arg1: filesec_t, arg2: filesec_property_t,
                                  arg3: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn filesec_set_property(arg1: filesec_t, arg2: filesec_property_t,
                                arg3: *const ::libc::c_void) -> ::libc::c_int;
    pub fn filesec_unset_property(arg1: filesec_t, arg2: filesec_property_t)
     -> ::libc::c_int;
    pub fn mlockall(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn munlockall() -> ::libc::c_int;
    pub fn mlock(arg1: *const ::libc::c_void, arg2: size_t) -> ::libc::c_int;
    pub fn mmap(arg1: *mut ::libc::c_void, arg2: size_t, arg3: ::libc::c_int,
                arg4: ::libc::c_int, arg5: ::libc::c_int, arg6: off_t)
     -> *mut ::libc::c_void;
    pub fn mprotect(arg1: *mut ::libc::c_void, arg2: size_t,
                    arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn msync(arg1: *mut ::libc::c_void, arg2: size_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn munlock(arg1: *const ::libc::c_void, arg2: size_t)
     -> ::libc::c_int;
    pub fn munmap(arg1: *mut ::libc::c_void, arg2: size_t) -> ::libc::c_int;
    pub fn shm_open(arg1: *const ::libc::c_char, arg2: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn shm_unlink(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn posix_madvise(arg1: *mut ::libc::c_void, arg2: size_t,
                         arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn madvise(arg1: *mut ::libc::c_void, arg2: size_t,
                   arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn mincore(arg1: *const ::libc::c_void, arg2: size_t,
                   arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn minherit(arg1: *mut ::libc::c_void, arg2: size_t,
                    arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn do_log(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_object_config_data(arg1: *mut ::libc::c_char,
                                   arg2: ::libc::c_int, arg3: ::libc::c_int,
                                   arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn add_contact(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                       arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                       arg5: *mut *mut ::libc::c_char,
                       arg6: *mut ::libc::c_char, arg7: *mut ::libc::c_char,
                       arg8: ::libc::c_int, arg9: ::libc::c_int,
                       arg10: ::libc::c_int, arg11: ::libc::c_int,
                       arg12: ::libc::c_int, arg13: ::libc::c_int,
                       arg14: ::libc::c_int, arg15: ::libc::c_int,
                       arg16: ::libc::c_int, arg17: ::libc::c_int,
                       arg18: ::libc::c_int, arg19: ::libc::c_int,
                       arg20: ::libc::c_int, arg21: ::libc::c_int,
                       arg22: ::libc::c_int, arg23: ::libc::c_int)
     -> *mut contact;
    pub fn add_service_notification_command_to_contact(arg1: *mut contact,
                                                       arg2:
                                                           *mut ::libc::c_char)
     -> *mut commandsmember;
    pub fn add_host_notification_command_to_contact(arg1: *mut contact,
                                                    arg2: *mut ::libc::c_char)
     -> *mut commandsmember;
    pub fn add_custom_variable_to_contact(arg1: *mut contact,
                                          arg2: *mut ::libc::c_char,
                                          arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_host(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                    arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                    arg5: *mut ::libc::c_char, arg6: ::libc::c_int,
                    arg7: ::libc::c_double, arg8: ::libc::c_double,
                    arg9: ::libc::c_int, arg10: ::libc::c_int,
                    arg11: ::libc::c_int, arg12: ::libc::c_int,
                    arg13: ::libc::c_int, arg14: ::libc::c_int,
                    arg15: ::libc::c_double, arg16: ::libc::c_double,
                    arg17: *mut ::libc::c_char, arg18: ::libc::c_int,
                    arg19: *mut ::libc::c_char, arg20: ::libc::c_int,
                    arg21: ::libc::c_int, arg22: *mut ::libc::c_char,
                    arg23: ::libc::c_int, arg24: ::libc::c_int,
                    arg25: ::libc::c_double, arg26: ::libc::c_double,
                    arg27: ::libc::c_int, arg28: ::libc::c_int,
                    arg29: ::libc::c_int, arg30: ::libc::c_int,
                    arg31: ::libc::c_int, arg32: ::libc::c_int,
                    arg33: ::libc::c_int, arg34: ::libc::c_int,
                    arg35: *mut ::libc::c_char, arg36: ::libc::c_int,
                    arg37: ::libc::c_int, arg38: *mut ::libc::c_char,
                    arg39: *mut ::libc::c_char, arg40: *mut ::libc::c_char,
                    arg41: *mut ::libc::c_char, arg42: *mut ::libc::c_char,
                    arg43: *mut ::libc::c_char, arg44: *mut ::libc::c_char,
                    arg45: ::libc::c_int, arg46: ::libc::c_int,
                    arg47: ::libc::c_int, arg48: ::libc::c_double,
                    arg49: ::libc::c_double, arg50: ::libc::c_double,
                    arg51: ::libc::c_int, arg52: ::libc::c_int,
                    arg53: ::libc::c_int, arg54: ::libc::c_int,
                    arg55: ::libc::c_int) -> *mut host;
    pub fn add_parent_host_to_host(arg1: *mut host, arg2: *mut ::libc::c_char)
     -> *mut hostsmember;
    pub fn add_child_link_to_host(arg1: *mut host, arg2: *mut host)
     -> *mut hostsmember;
    pub fn add_contactgroup_to_host(arg1: *mut host,
                                    arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_host(arg1: *mut host, arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_custom_variable_to_host(arg1: *mut host,
                                       arg2: *mut ::libc::c_char,
                                       arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_timeperiod(arg1: *mut ::libc::c_char,
                          arg2: *mut ::libc::c_char) -> *mut timeperiod;
    pub fn add_exclusion_to_timeperiod(arg1: *mut timeperiod,
                                       arg2: *mut ::libc::c_char)
     -> *mut timeperiodexclusion;
    pub fn add_timerange_to_timeperiod(arg1: *mut timeperiod,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_ulong,
                                       arg4: ::libc::c_ulong)
     -> *mut timerange;
    pub fn add_exception_to_timeperiod(arg1: *mut timeperiod,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_int,
                                       arg4: ::libc::c_int,
                                       arg5: ::libc::c_int,
                                       arg6: ::libc::c_int,
                                       arg7: ::libc::c_int,
                                       arg8: ::libc::c_int,
                                       arg9: ::libc::c_int,
                                       arg10: ::libc::c_int,
                                       arg11: ::libc::c_int,
                                       arg12: ::libc::c_int,
                                       arg13: ::libc::c_int)
     -> *mut daterange;
    pub fn add_timerange_to_daterange(arg1: *mut daterange,
                                      arg2: ::libc::c_ulong,
                                      arg3: ::libc::c_ulong)
     -> *mut timerange;
    pub fn add_hostgroup(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                         arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                         arg5: *mut ::libc::c_char) -> *mut hostgroup;
    pub fn add_host_to_hostgroup(arg1: *mut hostgroup,
                                 arg2: *mut ::libc::c_char)
     -> *mut hostsmember;
    pub fn add_servicegroup(arg1: *mut ::libc::c_char,
                            arg2: *mut ::libc::c_char,
                            arg3: *mut ::libc::c_char,
                            arg4: *mut ::libc::c_char,
                            arg5: *mut ::libc::c_char) -> *mut servicegroup;
    pub fn add_service_to_servicegroup(arg1: *mut servicegroup,
                                       arg2: *mut ::libc::c_char,
                                       arg3: *mut ::libc::c_char)
     -> *mut servicesmember;
    pub fn add_contactgroup(arg1: *mut ::libc::c_char,
                            arg2: *mut ::libc::c_char) -> *mut contactgroup;
    pub fn add_contact_to_contactgroup(arg1: *mut contactgroup,
                                       arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_command(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut command;
    pub fn add_service(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                       arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                       arg5: ::libc::c_int, arg6: ::libc::c_int,
                       arg7: ::libc::c_int, arg8: ::libc::c_int,
                       arg9: ::libc::c_double, arg10: ::libc::c_double,
                       arg11: ::libc::c_double, arg12: ::libc::c_double,
                       arg13: *mut ::libc::c_char, arg14: ::libc::c_int,
                       arg15: ::libc::c_int, arg16: ::libc::c_int,
                       arg17: ::libc::c_int, arg18: ::libc::c_int,
                       arg19: ::libc::c_int, arg20: ::libc::c_int,
                       arg21: ::libc::c_int, arg22: *mut ::libc::c_char,
                       arg23: ::libc::c_int, arg24: *mut ::libc::c_char,
                       arg25: ::libc::c_int, arg26: ::libc::c_int,
                       arg27: ::libc::c_double, arg28: ::libc::c_double,
                       arg29: ::libc::c_int, arg30: ::libc::c_int,
                       arg31: ::libc::c_int, arg32: ::libc::c_int,
                       arg33: ::libc::c_int, arg34: ::libc::c_int,
                       arg35: ::libc::c_int, arg36: ::libc::c_int,
                       arg37: ::libc::c_int, arg38: ::libc::c_int,
                       arg39: *mut ::libc::c_char, arg40: ::libc::c_int,
                       arg41: ::libc::c_int, arg42: *mut ::libc::c_char,
                       arg43: *mut ::libc::c_char, arg44: *mut ::libc::c_char,
                       arg45: *mut ::libc::c_char, arg46: *mut ::libc::c_char,
                       arg47: ::libc::c_int, arg48: ::libc::c_int,
                       arg49: ::libc::c_int) -> *mut service;
    pub fn add_contactgroup_to_service(arg1: *mut service,
                                       arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_service(arg1: *mut service,
                                  arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_serviceescalation(arg1: *mut ::libc::c_char,
                                 arg2: *mut ::libc::c_char,
                                 arg3: ::libc::c_int, arg4: ::libc::c_int,
                                 arg5: ::libc::c_double,
                                 arg6: *mut ::libc::c_char,
                                 arg7: ::libc::c_int, arg8: ::libc::c_int,
                                 arg9: ::libc::c_int, arg10: ::libc::c_int)
     -> *mut serviceescalation;
    pub fn add_contactgroup_to_serviceescalation(arg1: *mut serviceescalation,
                                                 arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_serviceescalation(arg1: *mut serviceescalation,
                                            arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_custom_variable_to_service(arg1: *mut service,
                                          arg2: *mut ::libc::c_char,
                                          arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_service_dependency(arg1: *mut ::libc::c_char,
                                  arg2: *mut ::libc::c_char,
                                  arg3: *mut ::libc::c_char,
                                  arg4: *mut ::libc::c_char,
                                  arg5: ::libc::c_int, arg6: ::libc::c_int,
                                  arg7: ::libc::c_int, arg8: ::libc::c_int,
                                  arg9: ::libc::c_int, arg10: ::libc::c_int,
                                  arg11: ::libc::c_int,
                                  arg12: *mut ::libc::c_char)
     -> *mut servicedependency;
    pub fn add_host_dependency(arg1: *mut ::libc::c_char,
                               arg2: *mut ::libc::c_char, arg3: ::libc::c_int,
                               arg4: ::libc::c_int, arg5: ::libc::c_int,
                               arg6: ::libc::c_int, arg7: ::libc::c_int,
                               arg8: ::libc::c_int, arg9: *mut ::libc::c_char)
     -> *mut hostdependency;
    pub fn add_hostescalation(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                              arg3: ::libc::c_int, arg4: ::libc::c_double,
                              arg5: *mut ::libc::c_char, arg6: ::libc::c_int,
                              arg7: ::libc::c_int, arg8: ::libc::c_int)
     -> *mut hostescalation;
    pub fn add_contact_to_hostescalation(arg1: *mut hostescalation,
                                         arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_contactgroup_to_hostescalation(arg1: *mut hostescalation,
                                              arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_object(arg1: *mut *mut contactsmember,
                                 arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_custom_variable_to_object(arg1:
                                             *mut *mut customvariablesmember,
                                         arg2: *mut ::libc::c_char,
                                         arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_service_link_to_host(arg1: *mut host, arg2: *mut service)
     -> *mut servicesmember;
    pub fn init_object_skiplists() -> ::libc::c_int;
    pub fn free_object_skiplists() -> ::libc::c_int;
    pub fn skiplist_compare_text(val1a: *const ::libc::c_char,
                                 val1b: *const ::libc::c_char,
                                 val2a: *const ::libc::c_char,
                                 val2b: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn skiplist_compare_host(a: *mut ::libc::c_void,
                                 b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_service(a: *mut ::libc::c_void,
                                    b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_command(a: *mut ::libc::c_void,
                                    b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_timeperiod(a: *mut ::libc::c_void,
                                       b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_contact(a: *mut ::libc::c_void,
                                    b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_contactgroup(a: *mut ::libc::c_void,
                                         b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_hostgroup(a: *mut ::libc::c_void,
                                      b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_servicegroup(a: *mut ::libc::c_void,
                                         b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_hostescalation(a: *mut ::libc::c_void,
                                           b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_serviceescalation(a: *mut ::libc::c_void,
                                              b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_hostdependency(a: *mut ::libc::c_void,
                                           b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_servicedependency(a: *mut ::libc::c_void,
                                              b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn get_host_count() -> ::libc::c_int;
    pub fn get_service_count() -> ::libc::c_int;
    pub fn add_servicedependency_to_hashlist(arg1: *mut servicedependency)
     -> ::libc::c_int;
    pub fn find_timeperiod(arg1: *mut ::libc::c_char) -> *mut timeperiod;
    pub fn find_host(arg1: *mut ::libc::c_char) -> *mut host;
    pub fn find_hostgroup(arg1: *mut ::libc::c_char) -> *mut hostgroup;
    pub fn find_servicegroup(arg1: *mut ::libc::c_char) -> *mut servicegroup;
    pub fn find_contact(arg1: *mut ::libc::c_char) -> *mut contact;
    pub fn find_contactgroup(arg1: *mut ::libc::c_char) -> *mut contactgroup;
    pub fn find_command(arg1: *mut ::libc::c_char) -> *mut command;
    pub fn find_service(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut service;
    pub fn get_first_hostescalation_by_host(arg1: *mut ::libc::c_char,
                                            arg2: *mut *mut ::libc::c_void)
     -> *mut hostescalation;
    pub fn get_next_hostescalation_by_host(arg1: *mut ::libc::c_char,
                                           arg2: *mut *mut ::libc::c_void)
     -> *mut hostescalation;
    pub fn get_first_serviceescalation_by_service(arg1: *mut ::libc::c_char,
                                                  arg2: *mut ::libc::c_char,
                                                  arg3:
                                                      *mut *mut ::libc::c_void)
     -> *mut serviceescalation;
    pub fn get_next_serviceescalation_by_service(arg1: *mut ::libc::c_char,
                                                 arg2: *mut ::libc::c_char,
                                                 arg3:
                                                     *mut *mut ::libc::c_void)
     -> *mut serviceescalation;
    pub fn get_first_hostdependency_by_dependent_host(arg1:
                                                          *mut ::libc::c_char,
                                                      arg2:
                                                          *mut *mut ::libc::c_void)
     -> *mut hostdependency;
    pub fn get_next_hostdependency_by_dependent_host(arg1:
                                                         *mut ::libc::c_char,
                                                     arg2:
                                                         *mut *mut ::libc::c_void)
     -> *mut hostdependency;
    pub fn get_first_servicedependency_by_dependent_service(arg1:
                                                                *mut ::libc::c_char,
                                                            arg2:
                                                                *mut ::libc::c_char,
                                                            arg3:
                                                                *mut *mut ::libc::c_void)
     -> *mut servicedependency;
    pub fn get_next_servicedependency_by_dependent_service(arg1:
                                                               *mut ::libc::c_char,
                                                           arg2:
                                                               *mut ::libc::c_char,
                                                           arg3:
                                                               *mut *mut ::libc::c_void)
     -> *mut servicedependency;
    pub fn is_host_immediate_child_of_host(arg1: *mut host, arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_primary_immediate_child_of_host(arg1: *mut host,
                                                   arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_immediate_parent_of_host(arg1: *mut host, arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_member_of_hostgroup(arg1: *mut hostgroup, arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_member_of_servicegroup(arg1: *mut servicegroup,
                                          arg2: *mut host) -> ::libc::c_int;
    pub fn is_service_member_of_servicegroup(arg1: *mut servicegroup,
                                             arg2: *mut service)
     -> ::libc::c_int;
    pub fn is_contact_member_of_contactgroup(arg1: *mut contactgroup,
                                             arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_contact_for_hostgroup(arg1: *mut hostgroup, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_contact_for_servicegroup(arg1: *mut servicegroup,
                                       arg2: *mut contact) -> ::libc::c_int;
    pub fn is_contact_for_host(arg1: *mut host, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_escalated_contact_for_host(arg1: *mut host, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_contact_for_service(arg1: *mut service, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_escalated_contact_for_service(arg1: *mut service,
                                            arg2: *mut contact)
     -> ::libc::c_int;
    pub fn number_of_immediate_child_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn number_of_total_child_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn number_of_immediate_parent_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn number_of_total_parent_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn free_object_data() -> ::libc::c_int;
    pub fn read_main_config_file(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_resource_file(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_all_object_data(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn pre_flight_check() -> ::libc::c_int;
    pub fn pre_flight_object_check(arg1: *mut ::libc::c_int,
                                   arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn pre_flight_circular_check(arg1: *mut ::libc::c_int,
                                     arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn init_timing_loop() -> ();
    pub fn setup_sighandler() -> ();
    pub fn reset_sighandler() -> ();
    pub fn daemon_init() -> ::libc::c_int;
    pub fn drop_privileges(arg1: *mut ::libc::c_char,
                           arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn display_scheduling_info() -> ();
    pub fn schedule_new_event(arg1: ::libc::c_int, arg2: ::libc::c_int,
                              arg3: time_t, arg4: ::libc::c_int,
                              arg5: ::libc::c_ulong,
                              arg6: *mut ::libc::c_void, arg7: ::libc::c_int,
                              arg8: *mut ::libc::c_void,
                              arg9: *mut ::libc::c_void, arg10: ::libc::c_int)
     -> ::libc::c_int;
    pub fn reschedule_event(arg1: *mut timed_event,
                            arg2: *mut *mut timed_event,
                            arg3: *mut *mut timed_event) -> ();
    pub fn add_event(arg1: *mut timed_event, arg2: *mut *mut timed_event,
                     arg3: *mut *mut timed_event) -> ();
    pub fn remove_event(arg1: *mut timed_event, arg2: *mut *mut timed_event,
                        arg3: *mut *mut timed_event) -> ();
    pub fn event_execution_loop() -> ::libc::c_int;
    pub fn handle_timed_event(arg1: *mut timed_event) -> ::libc::c_int;
    pub fn adjust_check_scheduling() -> ();
    pub fn compensate_for_system_time_change(arg1: ::libc::c_ulong,
                                             arg2: ::libc::c_ulong) -> ();
    pub fn adjust_timestamp_for_time_change(arg1: time_t, arg2: time_t,
                                            arg3: ::libc::c_ulong,
                                            arg4: *mut time_t) -> ();
    pub fn resort_event_list(arg1: *mut *mut timed_event,
                             arg2: *mut *mut timed_event) -> ();
    pub fn move_check_result_to_queue(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_check_result_queue(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_check_result_file(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn add_check_result_to_list(arg1: *mut check_result) -> ::libc::c_int;
    pub fn read_check_result() -> *mut check_result;
    pub fn delete_check_result_file(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn free_check_result_list() -> ::libc::c_int;
    pub fn init_check_result(arg1: *mut check_result) -> ::libc::c_int;
    pub fn free_check_result(arg1: *mut check_result) -> ::libc::c_int;
    pub fn parse_check_output(arg1: *mut ::libc::c_char,
                              arg2: *mut *mut ::libc::c_char,
                              arg3: *mut *mut ::libc::c_char,
                              arg4: *mut *mut ::libc::c_char,
                              arg5: ::libc::c_int, arg6: ::libc::c_int)
     -> ::libc::c_int;
    pub fn open_command_file() -> ::libc::c_int;
    pub fn close_command_file() -> ::libc::c_int;
    pub fn check_service_dependencies(arg1: *mut service, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_host_dependencies(arg1: *mut host, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_for_orphaned_services() -> ();
    pub fn check_for_orphaned_hosts() -> ();
    pub fn check_service_result_freshness() -> ();
    pub fn is_service_result_fresh(arg1: *mut service, arg2: time_t,
                                   arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn check_host_result_freshness() -> ();
    pub fn is_host_result_fresh(arg1: *mut host, arg2: time_t,
                                arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn my_system(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                     arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_double,
                     arg5: *mut *mut ::libc::c_char, arg6: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_for_service_flapping(arg1: *mut service, arg2: ::libc::c_int,
                                      arg3: ::libc::c_int) -> ();
    pub fn check_for_host_flapping(arg1: *mut host, arg2: ::libc::c_int,
                                   arg3: ::libc::c_int, arg4: ::libc::c_int)
     -> ();
    pub fn set_service_flap(arg1: *mut service, arg2: ::libc::c_double,
                            arg3: ::libc::c_double, arg4: ::libc::c_double,
                            arg5: ::libc::c_int) -> ();
    pub fn clear_service_flap(arg1: *mut service, arg2: ::libc::c_double,
                              arg3: ::libc::c_double, arg4: ::libc::c_double)
     -> ();
    pub fn set_host_flap(arg1: *mut host, arg2: ::libc::c_double,
                         arg3: ::libc::c_double, arg4: ::libc::c_double,
                         arg5: ::libc::c_int) -> ();
    pub fn clear_host_flap(arg1: *mut host, arg2: ::libc::c_double,
                           arg3: ::libc::c_double, arg4: ::libc::c_double)
     -> ();
    pub fn enable_flap_detection_routines() -> ();
    pub fn disable_flap_detection_routines() -> ();
    pub fn enable_host_flap_detection(arg1: *mut host) -> ();
    pub fn disable_host_flap_detection(arg1: *mut host) -> ();
    pub fn enable_service_flap_detection(arg1: *mut service) -> ();
    pub fn disable_service_flap_detection(arg1: *mut service) -> ();
    pub fn handle_host_flap_detection_disabled(arg1: *mut host) -> ();
    pub fn handle_service_flap_detection_disabled(arg1: *mut service) -> ();
    pub fn perform_on_demand_host_check(arg1: *mut host,
                                        arg2: *mut ::libc::c_int,
                                        arg3: ::libc::c_int,
                                        arg4: ::libc::c_int,
                                        arg5: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn perform_scheduled_host_check(arg1: *mut host, arg2: ::libc::c_int,
                                        arg3: ::libc::c_double)
     -> ::libc::c_int;
    pub fn check_host_check_viability_3x(arg1: *mut host, arg2: ::libc::c_int,
                                         arg3: *mut ::libc::c_int,
                                         arg4: *mut time_t) -> ::libc::c_int;
    pub fn adjust_host_check_attempt_3x(arg1: *mut host, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn determine_host_reachability(arg1: *mut host) -> ::libc::c_int;
    pub fn process_host_check_result_3x(arg1: *mut host, arg2: ::libc::c_int,
                                        arg3: *mut ::libc::c_char,
                                        arg4: ::libc::c_int,
                                        arg5: ::libc::c_int,
                                        arg6: ::libc::c_int,
                                        arg7: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn perform_on_demand_host_check_3x(arg1: *mut host,
                                           arg2: *mut ::libc::c_int,
                                           arg3: ::libc::c_int,
                                           arg4: ::libc::c_int,
                                           arg5: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn run_sync_host_check_3x(arg1: *mut host, arg2: *mut ::libc::c_int,
                                  arg3: ::libc::c_int, arg4: ::libc::c_int,
                                  arg5: ::libc::c_ulong) -> ::libc::c_int;
    pub fn execute_sync_host_check_3x(arg1: *mut host) -> ::libc::c_int;
    pub fn run_scheduled_host_check_3x(arg1: *mut host, arg2: ::libc::c_int,
                                       arg3: ::libc::c_double)
     -> ::libc::c_int;
    pub fn run_async_host_check_3x(arg1: *mut host, arg2: ::libc::c_int,
                                   arg3: ::libc::c_double,
                                   arg4: ::libc::c_int, arg5: ::libc::c_int,
                                   arg6: *mut ::libc::c_int,
                                   arg7: *mut time_t) -> ::libc::c_int;
    pub fn handle_async_host_check_result_3x(arg1: *mut host,
                                             arg2: *mut check_result)
     -> ::libc::c_int;
    pub fn check_service_check_viability(arg1: *mut service,
                                         arg2: ::libc::c_int,
                                         arg3: *mut ::libc::c_int,
                                         arg4: *mut time_t) -> ::libc::c_int;
    pub fn run_scheduled_service_check(arg1: *mut service,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_double)
     -> ::libc::c_int;
    pub fn run_async_service_check(arg1: *mut service, arg2: ::libc::c_int,
                                   arg3: ::libc::c_double,
                                   arg4: ::libc::c_int, arg5: ::libc::c_int,
                                   arg6: *mut ::libc::c_int,
                                   arg7: *mut time_t) -> ::libc::c_int;
    pub fn handle_async_service_check_result(arg1: *mut service,
                                             arg2: *mut check_result)
     -> ::libc::c_int;
    pub fn handle_host_state(arg1: *mut host) -> ::libc::c_int;
    pub fn reap_check_results() -> ::libc::c_int;
    pub fn init_check_stats() -> ::libc::c_int;
    pub fn update_check_stats(arg1: ::libc::c_int, arg2: time_t)
     -> ::libc::c_int;
    pub fn generate_check_stats() -> ::libc::c_int;
    pub fn obsessive_compulsive_service_check_processor(arg1: *mut service)
     -> ::libc::c_int;
    pub fn obsessive_compulsive_host_check_processor(arg1: *mut host)
     -> ::libc::c_int;
    pub fn handle_service_event(arg1: *mut service) -> ::libc::c_int;
    pub fn run_service_event_handler(arg1: *mut service) -> ::libc::c_int;
    pub fn run_global_service_event_handler(arg1: *mut service)
     -> ::libc::c_int;
    pub fn handle_host_event(arg1: *mut host) -> ::libc::c_int;
    pub fn run_host_event_handler(arg1: *mut host) -> ::libc::c_int;
    pub fn run_global_host_event_handler(arg1: *mut host) -> ::libc::c_int;
    pub fn check_service_notification_viability(arg1: *mut service,
                                                arg2: ::libc::c_int,
                                                arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn is_valid_escalation_for_service_notification(arg1: *mut service,
                                                        arg2:
                                                            *mut serviceescalation,
                                                        arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn should_service_notification_be_escalated(arg1: *mut service)
     -> ::libc::c_int;
    pub fn service_notification(arg1: *mut service, arg2: ::libc::c_int,
                                arg3: *mut ::libc::c_char,
                                arg4: *mut ::libc::c_char,
                                arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn check_contact_service_notification_viability(arg1: *mut contact,
                                                        arg2: *mut service,
                                                        arg3: ::libc::c_int,
                                                        arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn notify_contact_of_service(arg1: *mut contact, arg2: *mut service,
                                     arg3: ::libc::c_int,
                                     arg4: *mut ::libc::c_char,
                                     arg5: *mut ::libc::c_char,
                                     arg6: ::libc::c_int, arg7: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_host_notification_viability(arg1: *mut host,
                                             arg2: ::libc::c_int,
                                             arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn is_valid_escalation_for_host_notification(arg1: *mut host,
                                                     arg2:
                                                         *mut hostescalation,
                                                     arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn should_host_notification_be_escalated(arg1: *mut host)
     -> ::libc::c_int;
    pub fn host_notification(arg1: *mut host, arg2: ::libc::c_int,
                             arg3: *mut ::libc::c_char,
                             arg4: *mut ::libc::c_char, arg5: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_contact_host_notification_viability(arg1: *mut contact,
                                                     arg2: *mut host,
                                                     arg3: ::libc::c_int,
                                                     arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn notify_contact_of_host(arg1: *mut contact, arg2: *mut host,
                                  arg3: ::libc::c_int,
                                  arg4: *mut ::libc::c_char,
                                  arg5: *mut ::libc::c_char,
                                  arg6: ::libc::c_int, arg7: ::libc::c_int)
     -> ::libc::c_int;
    pub fn create_notification_list_from_host(arg1: *mut host,
                                              arg2: ::libc::c_int,
                                              arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn create_notification_list_from_service(arg1: *mut service,
                                                 arg2: ::libc::c_int,
                                                 arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn add_notification(arg1: *mut contact) -> ::libc::c_int;
    pub fn find_notification(arg1: *mut contact) -> *mut notification;
    pub fn get_next_host_notification_time(arg1: *mut host, arg2: time_t)
     -> time_t;
    pub fn get_next_service_notification_time(arg1: *mut service,
                                              arg2: time_t) -> time_t;
    pub fn logit(arg1: ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *const ::libc::c_char, ...) -> ();
    pub fn write_to_logs_and_console(arg1: *mut ::libc::c_char,
                                     arg2: ::libc::c_ulong,
                                     arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn write_to_console(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn write_to_all_logs(arg1: *mut ::libc::c_char, arg2: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn write_to_all_logs_with_timestamp(arg1: *mut ::libc::c_char,
                                            arg2: ::libc::c_ulong,
                                            arg3: *mut time_t)
     -> ::libc::c_int;
    pub fn write_to_log(arg1: *mut ::libc::c_char, arg2: ::libc::c_ulong,
                        arg3: *mut time_t) -> ::libc::c_int;
    pub fn write_to_syslog(arg1: *mut ::libc::c_char, arg2: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn log_service_event(arg1: *mut service) -> ::libc::c_int;
    pub fn log_host_event(arg1: *mut host) -> ::libc::c_int;
    pub fn log_host_states(arg1: ::libc::c_int, arg2: *mut time_t)
     -> ::libc::c_int;
    pub fn log_service_states(arg1: ::libc::c_int, arg2: *mut time_t)
     -> ::libc::c_int;
    pub fn rotate_log_file(arg1: time_t) -> ::libc::c_int;
    pub fn write_log_file_info(arg1: *mut time_t) -> ::libc::c_int;
    pub fn open_debug_log() -> ::libc::c_int;
    pub fn log_debug_info(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn close_debug_log() -> ::libc::c_int;
    pub fn cleanup() -> ();
    pub fn free_memory() -> ();
    pub fn reset_variables() -> ::libc::c_int;
    pub fn free_notification_list() -> ();
    pub fn hashfunc(name1: *const ::libc::c_char,
                    name2: *const ::libc::c_char, hashslots: ::libc::c_int)
     -> ::libc::c_int;
    pub fn compare_hashdata(arg1: *const ::libc::c_char,
                            arg2: *const ::libc::c_char,
                            arg3: *const ::libc::c_char,
                            arg4: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sighandler(arg1: ::libc::c_int) -> ();
    pub fn service_check_sighandler(arg1: ::libc::c_int) -> ();
    pub fn host_check_sighandler(arg1: ::libc::c_int) -> ();
    pub fn my_system_sighandler(arg1: ::libc::c_int) -> ();
    pub fn file_lock_sighandler(arg1: ::libc::c_int) -> ();
    pub fn strip(arg1: *mut ::libc::c_char) -> ();
    pub fn my_strtok(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn my_strsep(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn compare_strings(arg1: *mut ::libc::c_char,
                           arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn escape_newlines(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn contains_illegal_object_chars(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn my_rename(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn my_fcopy(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn get_raw_command_line(arg1: *mut command, arg2: *mut ::libc::c_char,
                                arg3: *mut *mut ::libc::c_char,
                                arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn check_time_against_period(arg1: time_t, arg2: *mut timeperiod)
     -> ::libc::c_int;
    pub fn is_daterange_single_day(arg1: *mut daterange) -> ::libc::c_int;
    pub fn calculate_time_from_weekday_of_month(arg1: ::libc::c_int,
                                                arg2: ::libc::c_int,
                                                arg3: ::libc::c_int,
                                                arg4: ::libc::c_int)
     -> time_t;
    pub fn calculate_time_from_day_of_month(arg1: ::libc::c_int,
                                            arg2: ::libc::c_int,
                                            arg3: ::libc::c_int) -> time_t;
    pub fn get_next_valid_time(arg1: time_t, arg2: *mut time_t,
                               arg3: *mut timeperiod) -> ();
    pub fn get_datetime_string(arg1: *mut time_t, arg2: *mut ::libc::c_char,
                               arg3: ::libc::c_int, arg4: ::libc::c_int)
     -> ();
    pub fn get_time_breakdown(arg1: ::libc::c_ulong, arg2: *mut ::libc::c_int,
                              arg3: *mut ::libc::c_int,
                              arg4: *mut ::libc::c_int,
                              arg5: *mut ::libc::c_int) -> ();
    pub fn get_next_log_rotation_time() -> time_t;
    pub fn init_embedded_perl(arg1: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn deinit_embedded_perl() -> ::libc::c_int;
    pub fn file_uses_embedded_perl(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn dbuf_init(arg1: *mut dbuf, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn dbuf_free(arg1: *mut dbuf) -> ::libc::c_int;
    pub fn dbuf_strcat(arg1: *mut dbuf, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn set_environment_var(arg1: *mut ::libc::c_char,
                               arg2: *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_for_external_commands() -> ::libc::c_int;
    pub fn process_external_command1(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_external_command2(arg1: ::libc::c_int, arg2: time_t,
                                     arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_external_commands_from_file(arg1: *mut ::libc::c_char,
                                               arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn process_host_command(arg1: ::libc::c_int, arg2: time_t,
                                arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn process_hostgroup_command(arg1: ::libc::c_int, arg2: time_t,
                                     arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_service_command(arg1: ::libc::c_int, arg2: time_t,
                                   arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_servicegroup_command(arg1: ::libc::c_int, arg2: time_t,
                                        arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_contact_command(arg1: ::libc::c_int, arg2: time_t,
                                   arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_contactgroup_command(arg1: ::libc::c_int, arg2: time_t,
                                        arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_add_comment(arg1: ::libc::c_int, arg2: time_t,
                           arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cmd_delete_comment(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_delete_all_comments(arg1: ::libc::c_int,
                                   arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_delay_notification(arg1: ::libc::c_int,
                                  arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cmd_schedule_service_check(arg1: ::libc::c_int,
                                      arg2: *mut ::libc::c_char,
                                      arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn cmd_schedule_check(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_schedule_host_service_checks(arg1: ::libc::c_int,
                                            arg2: *mut ::libc::c_char,
                                            arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn cmd_signal_process(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_process_service_check_result(arg1: ::libc::c_int, arg2: time_t,
                                            arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_process_host_check_result(arg1: ::libc::c_int, arg2: time_t,
                                         arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_acknowledge_problem(arg1: ::libc::c_int,
                                   arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_remove_acknowledgement(arg1: ::libc::c_int,
                                      arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_schedule_downtime(arg1: ::libc::c_int, arg2: time_t,
                                 arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cmd_delete_downtime(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_change_object_int_var(arg1: ::libc::c_int,
                                     arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_change_object_char_var(arg1: ::libc::c_int,
                                      arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_change_object_custom_var(arg1: ::libc::c_int,
                                        arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_process_external_commands_from_file(arg1: ::libc::c_int,
                                                   arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_passive_service_check(arg1: time_t,
                                         arg2: *mut ::libc::c_char,
                                         arg3: *mut ::libc::c_char,
                                         arg4: ::libc::c_int,
                                         arg5: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_passive_host_check(arg1: time_t, arg2: *mut ::libc::c_char,
                                      arg3: ::libc::c_int,
                                      arg4: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn disable_service_checks(arg1: *mut service) -> ();
    pub fn enable_service_checks(arg1: *mut service) -> ();
    pub fn schedule_service_check(arg1: *mut service, arg2: time_t,
                                  arg3: ::libc::c_int) -> ();
    pub fn schedule_host_check(arg1: *mut host, arg2: time_t,
                               arg3: ::libc::c_int) -> ();
    pub fn enable_all_notifications() -> ();
    pub fn disable_all_notifications() -> ();
    pub fn enable_service_notifications(arg1: *mut service) -> ();
    pub fn disable_service_notifications(arg1: *mut service) -> ();
    pub fn enable_host_notifications(arg1: *mut host) -> ();
    pub fn disable_host_notifications(arg1: *mut host) -> ();
    pub fn enable_and_propagate_notifications(arg1: *mut host,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int,
                                              arg4: ::libc::c_int,
                                              arg5: ::libc::c_int) -> ();
    pub fn disable_and_propagate_notifications(arg1: *mut host,
                                               arg2: ::libc::c_int,
                                               arg3: ::libc::c_int,
                                               arg4: ::libc::c_int,
                                               arg5: ::libc::c_int) -> ();
    pub fn schedule_and_propagate_downtime(arg1: *mut host, arg2: time_t,
                                           arg3: *mut ::libc::c_char,
                                           arg4: *mut ::libc::c_char,
                                           arg5: time_t, arg6: time_t,
                                           arg7: ::libc::c_int,
                                           arg8: ::libc::c_ulong,
                                           arg9: ::libc::c_ulong) -> ();
    pub fn acknowledge_host_problem(arg1: *mut host,
                                    arg2: *mut ::libc::c_char,
                                    arg3: *mut ::libc::c_char,
                                    arg4: ::libc::c_int, arg5: ::libc::c_int,
                                    arg6: ::libc::c_int) -> ();
    pub fn acknowledge_service_problem(arg1: *mut service,
                                       arg2: *mut ::libc::c_char,
                                       arg3: *mut ::libc::c_char,
                                       arg4: ::libc::c_int,
                                       arg5: ::libc::c_int,
                                       arg6: ::libc::c_int) -> ();
    pub fn remove_host_acknowledgement(arg1: *mut host) -> ();
    pub fn remove_service_acknowledgement(arg1: *mut service) -> ();
    pub fn start_executing_service_checks() -> ();
    pub fn stop_executing_service_checks() -> ();
    pub fn start_accepting_passive_service_checks() -> ();
    pub fn stop_accepting_passive_service_checks() -> ();
    pub fn enable_passive_service_checks(arg1: *mut service) -> ();
    pub fn disable_passive_service_checks(arg1: *mut service) -> ();
    pub fn start_using_event_handlers() -> ();
    pub fn stop_using_event_handlers() -> ();
    pub fn enable_service_event_handler(arg1: *mut service) -> ();
    pub fn disable_service_event_handler(arg1: *mut service) -> ();
    pub fn enable_host_event_handler(arg1: *mut host) -> ();
    pub fn disable_host_event_handler(arg1: *mut host) -> ();
    pub fn enable_host_checks(arg1: *mut host) -> ();
    pub fn disable_host_checks(arg1: *mut host) -> ();
    pub fn start_obsessing_over_service_checks() -> ();
    pub fn stop_obsessing_over_service_checks() -> ();
    pub fn start_obsessing_over_host_checks() -> ();
    pub fn stop_obsessing_over_host_checks() -> ();
    pub fn enable_service_freshness_checks() -> ();
    pub fn disable_service_freshness_checks() -> ();
    pub fn enable_host_freshness_checks() -> ();
    pub fn disable_host_freshness_checks() -> ();
    pub fn process_passive_checks() -> ();
    pub fn enable_all_failure_prediction() -> ();
    pub fn disable_all_failure_prediction() -> ();
    pub fn enable_performance_data() -> ();
    pub fn disable_performance_data() -> ();
    pub fn start_executing_host_checks() -> ();
    pub fn stop_executing_host_checks() -> ();
    pub fn start_accepting_passive_host_checks() -> ();
    pub fn stop_accepting_passive_host_checks() -> ();
    pub fn enable_passive_host_checks(arg1: *mut host) -> ();
    pub fn disable_passive_host_checks(arg1: *mut host) -> ();
    pub fn start_obsessing_over_service(arg1: *mut service) -> ();
    pub fn stop_obsessing_over_service(arg1: *mut service) -> ();
    pub fn start_obsessing_over_host(arg1: *mut host) -> ();
    pub fn stop_obsessing_over_host(arg1: *mut host) -> ();
    pub fn set_host_notification_number(arg1: *mut host, arg2: ::libc::c_int)
     -> ();
    pub fn set_service_notification_number(arg1: *mut service,
                                           arg2: ::libc::c_int) -> ();
    pub fn enable_contact_host_notifications(arg1: *mut contact) -> ();
    pub fn disable_contact_host_notifications(arg1: *mut contact) -> ();
    pub fn enable_contact_service_notifications(arg1: *mut contact) -> ();
    pub fn disable_contact_service_notifications(arg1: *mut contact) -> ();
    pub fn init_check_result_worker_thread() -> ::libc::c_int;
    pub fn shutdown_check_result_worker_thread() -> ::libc::c_int;
    pub fn check_result_worker_thread(arg1: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cleanup_check_result_worker_thread(arg1: *mut ::libc::c_void)
     -> ();
    pub fn init_command_file_worker_thread() -> ::libc::c_int;
    pub fn shutdown_command_file_worker_thread() -> ::libc::c_int;
    pub fn command_file_worker_thread(arg1: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cleanup_command_file_worker_thread(arg1: *mut ::libc::c_void)
     -> ();
    pub fn submit_external_command(arg1: *mut ::libc::c_char,
                                   arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn submit_raw_external_command(arg1: *mut ::libc::c_char,
                                       arg2: *mut time_t,
                                       arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn get_program_version() -> *mut ::libc::c_char;
    pub fn get_program_modification_date() -> *mut ::libc::c_char;
    pub fn mmap_fopen(arg1: *mut ::libc::c_char) -> *mut mmapfile;
    pub fn mmap_fclose(arg1: *mut mmapfile) -> ::libc::c_int;
    pub fn mmap_fgets(arg1: *mut mmapfile) -> *mut ::libc::c_char;
    pub fn mmap_fgets_multiline(arg1: *mut mmapfile) -> *mut ::libc::c_char;
    pub fn pnp_mmap_fopen(arg1: *mut ::libc::c_char) -> *mut pnp_mmapfile;
    pub fn pnp_mmap_fclose(arg1: *mut pnp_mmapfile) -> ::libc::c_int;
    pub fn pnp_mmap_fgets(arg1: *mut pnp_mmapfile) -> *mut ::libc::c_char;
    pub fn pnp_mmap_fgets_multiline(arg1: *mut pnp_mmapfile)
     -> *mut ::libc::c_char;
    pub fn pnp_strip(arg1: *mut ::libc::c_char) -> ();
}
