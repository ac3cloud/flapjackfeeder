/* automatically generated by rust-bindgen */

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebmodule_struct {
    pub filename: *mut ::libc::c_char,
    pub args: *mut ::libc::c_char,
    pub info: [*mut ::libc::c_char; 6usize],
    pub should_be_loaded: ::libc::c_int,
    pub is_currently_loaded: ::libc::c_int,
    pub module_handle: *mut ::libc::c_void,
    pub init_func: *mut ::libc::c_void,
    pub deinit_func: *mut ::libc::c_void,
    pub next: *mut Struct_nebmodule_struct,
}
impl ::std::clone::Clone for Struct_nebmodule_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebmodule_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebmodule = Struct_nebmodule_struct;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type intptr_t = __intptr_t;
pub type socklen_t = __socklen_t;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const _PC_LINK_MAX: ::libc::c_uint = 0;
pub const _PC_MAX_CANON: ::libc::c_uint = 1;
pub const _PC_MAX_INPUT: ::libc::c_uint = 2;
pub const _PC_NAME_MAX: ::libc::c_uint = 3;
pub const _PC_PATH_MAX: ::libc::c_uint = 4;
pub const _PC_PIPE_BUF: ::libc::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::libc::c_uint = 6;
pub const _PC_NO_TRUNC: ::libc::c_uint = 7;
pub const _PC_VDISABLE: ::libc::c_uint = 8;
pub const _PC_SYNC_IO: ::libc::c_uint = 9;
pub const _PC_ASYNC_IO: ::libc::c_uint = 10;
pub const _PC_PRIO_IO: ::libc::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::libc::c_uint = 12;
pub const _PC_FILESIZEBITS: ::libc::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::libc::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::libc::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::libc::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::libc::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::libc::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::libc::c_uint = 19;
pub const _PC_2_SYMLINKS: ::libc::c_uint = 20;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const _SC_ARG_MAX: ::libc::c_uint = 0;
pub const _SC_CHILD_MAX: ::libc::c_uint = 1;
pub const _SC_CLK_TCK: ::libc::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::libc::c_uint = 3;
pub const _SC_OPEN_MAX: ::libc::c_uint = 4;
pub const _SC_STREAM_MAX: ::libc::c_uint = 5;
pub const _SC_TZNAME_MAX: ::libc::c_uint = 6;
pub const _SC_JOB_CONTROL: ::libc::c_uint = 7;
pub const _SC_SAVED_IDS: ::libc::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::libc::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::libc::c_uint = 10;
pub const _SC_TIMERS: ::libc::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::libc::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::libc::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::libc::c_uint = 14;
pub const _SC_FSYNC: ::libc::c_uint = 15;
pub const _SC_MAPPED_FILES: ::libc::c_uint = 16;
pub const _SC_MEMLOCK: ::libc::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::libc::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::libc::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::libc::c_uint = 20;
pub const _SC_SEMAPHORES: ::libc::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::libc::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::libc::c_uint = 23;
pub const _SC_AIO_MAX: ::libc::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::libc::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::libc::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::libc::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::libc::c_uint = 28;
pub const _SC_VERSION: ::libc::c_uint = 29;
pub const _SC_PAGESIZE: ::libc::c_uint = 30;
pub const _SC_RTSIG_MAX: ::libc::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::libc::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::libc::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::libc::c_uint = 34;
pub const _SC_TIMER_MAX: ::libc::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::libc::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::libc::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::libc::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::libc::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::libc::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::libc::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::libc::c_uint = 42;
pub const _SC_LINE_MAX: ::libc::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::libc::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::libc::c_uint = 45;
pub const _SC_2_VERSION: ::libc::c_uint = 46;
pub const _SC_2_C_BIND: ::libc::c_uint = 47;
pub const _SC_2_C_DEV: ::libc::c_uint = 48;
pub const _SC_2_FORT_DEV: ::libc::c_uint = 49;
pub const _SC_2_FORT_RUN: ::libc::c_uint = 50;
pub const _SC_2_SW_DEV: ::libc::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::libc::c_uint = 52;
pub const _SC_PII: ::libc::c_uint = 53;
pub const _SC_PII_XTI: ::libc::c_uint = 54;
pub const _SC_PII_SOCKET: ::libc::c_uint = 55;
pub const _SC_PII_INTERNET: ::libc::c_uint = 56;
pub const _SC_PII_OSI: ::libc::c_uint = 57;
pub const _SC_POLL: ::libc::c_uint = 58;
pub const _SC_SELECT: ::libc::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::libc::c_uint = 60;
pub const _SC_IOV_MAX: ::libc::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::libc::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::libc::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::libc::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::libc::c_uint = 64;
pub const _SC_PII_OSI_M: ::libc::c_uint = 65;
pub const _SC_T_IOV_MAX: ::libc::c_uint = 66;
pub const _SC_THREADS: ::libc::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::libc::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::libc::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::libc::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::libc::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::libc::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::libc::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::libc::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::libc::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::libc::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::libc::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::libc::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::libc::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::libc::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::libc::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::libc::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::libc::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::libc::c_uint = 84;
pub const _SC_PHYS_PAGES: ::libc::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::libc::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::libc::c_uint = 87;
pub const _SC_PASS_MAX: ::libc::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::libc::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::libc::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::libc::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::libc::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::libc::c_uint = 93;
pub const _SC_XOPEN_SHM: ::libc::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::libc::c_uint = 95;
pub const _SC_2_C_VERSION: ::libc::c_uint = 96;
pub const _SC_2_UPE: ::libc::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::libc::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::libc::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::libc::c_uint = 100;
pub const _SC_CHAR_BIT: ::libc::c_uint = 101;
pub const _SC_CHAR_MAX: ::libc::c_uint = 102;
pub const _SC_CHAR_MIN: ::libc::c_uint = 103;
pub const _SC_INT_MAX: ::libc::c_uint = 104;
pub const _SC_INT_MIN: ::libc::c_uint = 105;
pub const _SC_LONG_BIT: ::libc::c_uint = 106;
pub const _SC_WORD_BIT: ::libc::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::libc::c_uint = 108;
pub const _SC_NZERO: ::libc::c_uint = 109;
pub const _SC_SSIZE_MAX: ::libc::c_uint = 110;
pub const _SC_SCHAR_MAX: ::libc::c_uint = 111;
pub const _SC_SCHAR_MIN: ::libc::c_uint = 112;
pub const _SC_SHRT_MAX: ::libc::c_uint = 113;
pub const _SC_SHRT_MIN: ::libc::c_uint = 114;
pub const _SC_UCHAR_MAX: ::libc::c_uint = 115;
pub const _SC_UINT_MAX: ::libc::c_uint = 116;
pub const _SC_ULONG_MAX: ::libc::c_uint = 117;
pub const _SC_USHRT_MAX: ::libc::c_uint = 118;
pub const _SC_NL_ARGMAX: ::libc::c_uint = 119;
pub const _SC_NL_LANGMAX: ::libc::c_uint = 120;
pub const _SC_NL_MSGMAX: ::libc::c_uint = 121;
pub const _SC_NL_NMAX: ::libc::c_uint = 122;
pub const _SC_NL_SETMAX: ::libc::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::libc::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::libc::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::libc::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::libc::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::libc::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::libc::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::libc::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::libc::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::libc::c_uint = 132;
pub const _SC_BARRIERS: ::libc::c_uint = 133;
pub const _SC_BASE: ::libc::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::libc::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::libc::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::libc::c_uint = 137;
pub const _SC_CPUTIME: ::libc::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::libc::c_uint = 139;
pub const _SC_DEVICE_IO: ::libc::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::libc::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::libc::c_uint = 142;
pub const _SC_FD_MGMT: ::libc::c_uint = 143;
pub const _SC_FIFO: ::libc::c_uint = 144;
pub const _SC_PIPE: ::libc::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::libc::c_uint = 146;
pub const _SC_FILE_LOCKING: ::libc::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::libc::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::libc::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::libc::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::libc::c_uint = 151;
pub const _SC_NETWORKING: ::libc::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::libc::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::libc::c_uint = 154;
pub const _SC_REGEXP: ::libc::c_uint = 155;
pub const _SC_REGEX_VERSION: ::libc::c_uint = 156;
pub const _SC_SHELL: ::libc::c_uint = 157;
pub const _SC_SIGNALS: ::libc::c_uint = 158;
pub const _SC_SPAWN: ::libc::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::libc::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::libc::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::libc::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::libc::c_uint = 163;
pub const _SC_TIMEOUTS: ::libc::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::libc::c_uint = 165;
pub const _SC_USER_GROUPS: ::libc::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::libc::c_uint = 167;
pub const _SC_2_PBS: ::libc::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::libc::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::libc::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::libc::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::libc::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::libc::c_uint = 173;
pub const _SC_STREAMS: ::libc::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::libc::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::libc::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::libc::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::libc::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::libc::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::libc::c_uint = 180;
pub const _SC_TRACE: ::libc::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::libc::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::libc::c_uint = 183;
pub const _SC_TRACE_LOG: ::libc::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::libc::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::libc::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::libc::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::libc::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::libc::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::libc::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::libc::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::libc::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::libc::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::libc::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::libc::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::libc::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::libc::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::libc::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::libc::c_uint = 199;
pub const _SC_IPV6: ::libc::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::libc::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::libc::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::libc::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::libc::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::libc::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::libc::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::libc::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::libc::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::libc::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::libc::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::libc::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::libc::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::libc::c_uint = 248;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const _CS_PATH: ::libc::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::libc::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::libc::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::libc::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::libc::c_uint = 1001;
pub const _CS_LFS_LIBS: ::libc::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::libc::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::libc::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::libc::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::libc::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::libc::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::libc::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::libc::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::libc::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::libc::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::libc::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::libc::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::libc::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::libc::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::libc::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1147;
pub const _CS_V6_ENV: ::libc::c_uint = 1148;
pub const _CS_V7_ENV: ::libc::c_uint = 1149;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub __val: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed9;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed10;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
impl ::std::clone::Clone for Struct___pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed11 {
    pub _bindgen_data_: [u64; 5usize],
}
impl Union_Unnamed11 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed11;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed14 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed15 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed15 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed15;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed16 {
    pub _bindgen_data_: [u64; 7usize],
}
impl Union_Unnamed16 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed17 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed16;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed18 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed18 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed18;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed19 {
    pub _bindgen_data_: [u64; 4usize],
}
impl Union_Unnamed19 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed20 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed20 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed20;
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigval_t = Union_sigval;
pub type __sigchld_clock_t = __clock_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub _sifields: Union_Unnamed22,
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed22 {
    pub _bindgen_data_: [u64; 14usize],
}
impl Union_Unnamed22 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 28usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed23 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed24 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed25 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed26 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed27 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed28 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed29 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub si_tid: ::libc::c_int,
    pub si_overrun: ::libc::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::libc::c_int,
    pub si_utime: __sigchld_clock_t,
    pub si_stime: __sigchld_clock_t,
}
impl ::std::clone::Clone for Struct_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub si_addr: *mut ::libc::c_void,
    pub si_addr_lsb: ::libc::c_short,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub si_band: ::libc::c_long,
    pub si_fd: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub _call_addr: *mut ::libc::c_void,
    pub _syscall: ::libc::c_int,
    pub _arch: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct_Unnamed21;
pub type Enum_Unnamed30 = ::libc::c_int;
pub const SI_ASYNCNL: ::libc::c_int = -60;
pub const SI_TKILL: ::libc::c_int = -6;
pub const SI_SIGIO: ::libc::c_int = -5;
pub const SI_ASYNCIO: ::libc::c_int = -4;
pub const SI_MESGQ: ::libc::c_int = -3;
pub const SI_TIMER: ::libc::c_int = -2;
pub const SI_QUEUE: ::libc::c_int = -1;
pub const SI_USER: ::libc::c_int = 0;
pub const SI_KERNEL: ::libc::c_int = 128;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const ILL_ILLOPC: ::libc::c_uint = 1;
pub const ILL_ILLOPN: ::libc::c_uint = 2;
pub const ILL_ILLADR: ::libc::c_uint = 3;
pub const ILL_ILLTRP: ::libc::c_uint = 4;
pub const ILL_PRVOPC: ::libc::c_uint = 5;
pub const ILL_PRVREG: ::libc::c_uint = 6;
pub const ILL_COPROC: ::libc::c_uint = 7;
pub const ILL_BADSTK: ::libc::c_uint = 8;
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const FPE_INTDIV: ::libc::c_uint = 1;
pub const FPE_INTOVF: ::libc::c_uint = 2;
pub const FPE_FLTDIV: ::libc::c_uint = 3;
pub const FPE_FLTOVF: ::libc::c_uint = 4;
pub const FPE_FLTUND: ::libc::c_uint = 5;
pub const FPE_FLTRES: ::libc::c_uint = 6;
pub const FPE_FLTINV: ::libc::c_uint = 7;
pub const FPE_FLTSUB: ::libc::c_uint = 8;
pub type Enum_Unnamed33 = ::libc::c_uint;
pub const SEGV_MAPERR: ::libc::c_uint = 1;
pub const SEGV_ACCERR: ::libc::c_uint = 2;
pub type Enum_Unnamed34 = ::libc::c_uint;
pub const BUS_ADRALN: ::libc::c_uint = 1;
pub const BUS_ADRERR: ::libc::c_uint = 2;
pub const BUS_OBJERR: ::libc::c_uint = 3;
pub const BUS_MCEERR_AR: ::libc::c_uint = 4;
pub const BUS_MCEERR_AO: ::libc::c_uint = 5;
pub type Enum_Unnamed35 = ::libc::c_uint;
pub const TRAP_BRKPT: ::libc::c_uint = 1;
pub const TRAP_TRACE: ::libc::c_uint = 2;
pub type Enum_Unnamed36 = ::libc::c_uint;
pub const CLD_EXITED: ::libc::c_uint = 1;
pub const CLD_KILLED: ::libc::c_uint = 2;
pub const CLD_DUMPED: ::libc::c_uint = 3;
pub const CLD_TRAPPED: ::libc::c_uint = 4;
pub const CLD_STOPPED: ::libc::c_uint = 5;
pub const CLD_CONTINUED: ::libc::c_uint = 6;
pub type Enum_Unnamed37 = ::libc::c_uint;
pub const POLL_IN: ::libc::c_uint = 1;
pub const POLL_OUT: ::libc::c_uint = 2;
pub const POLL_MSG: ::libc::c_uint = 3;
pub const POLL_ERR: ::libc::c_uint = 4;
pub const POLL_PRI: ::libc::c_uint = 5;
pub const POLL_HUP: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::libc::c_int,
    pub sigev_notify: ::libc::c_int,
    pub _sigev_un: Union_Unnamed38,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed38 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed38 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 12usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed39 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t) -> ()>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigevent_t = Struct_sigevent;
pub type Enum_Unnamed40 = ::libc::c_uint;
pub const SIGEV_SIGNAL: ::libc::c_uint = 0;
pub const SIGEV_NONE: ::libc::c_uint = 1;
pub const SIGEV_THREAD: ::libc::c_uint = 2;
pub const SIGEV_THREAD_ID: ::libc::c_uint = 4;
pub type __sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed41,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::libc::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed41 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed41 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut siginfo_t,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: __sighandler_t,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub padding: [__uint32_t; 7usize],
}
impl ::std::clone::Clone for Struct__fpx_sw_bytes {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpx_sw_bytes {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpreg {
    pub significand: [::libc::c_ushort; 4usize],
    pub exponent: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct__fpreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpxreg {
    pub significand: [::libc::c_ushort; 4usize],
    pub exponent: ::libc::c_ushort,
    pub padding: [::libc::c_ushort; 3usize],
}
impl ::std::clone::Clone for Struct__fpxreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpxreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::clone::Clone for Struct__xmmreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xmmreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__fpxreg; 8usize],
    pub _xmm: [Struct__xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::clone::Clone for Struct__fpstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::libc::c_ushort,
    pub gs: ::libc::c_ushort,
    pub fs: ::libc::c_ushort,
    pub __pad0: ::libc::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub _bindgen_data_1_: [u64; 1usize],
    pub __reserved1: [__uint64_t; 8usize],
}
impl Struct_sigcontext {
    pub unsafe fn fpstate(&mut self) -> *mut *mut Struct__fpstate {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __fpstate_word(&mut self) -> *mut __uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_sigcontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub reserved1: [__uint64_t; 2usize],
    pub reserved2: [__uint64_t; 5usize],
}
impl ::std::clone::Clone for Struct__xsave_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xsave_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
impl ::std::clone::Clone for Struct__ymmh_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__ymmh_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__xstate {
    pub fpstate: Struct__fpstate,
    pub xstate_hdr: Struct__xsave_hdr,
    pub ymmh: Struct__ymmh_state,
}
impl ::std::clone::Clone for Struct__xstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__xstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed42 = ::libc::c_uint;
pub const SS_ONSTACK: ::libc::c_uint = 1;
pub const SS_DISABLE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_flags: ::libc::c_int,
    pub ss_size: size_t,
}
impl ::std::clone::Clone for Struct_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::libc::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpxreg {
    pub significand: [::libc::c_ushort; 4usize],
    pub exponent: ::libc::c_ushort,
    pub padding: [::libc::c_ushort; 3usize],
}
impl ::std::clone::Clone for Struct__libc_fpxreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_fpxreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
impl ::std::clone::Clone for Struct__libc_xmmreg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_xmmreg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [Struct__libc_fpxreg; 8usize],
    pub _xmm: [Struct__libc_xmmreg; 16usize],
    pub padding: [__uint32_t; 24usize],
}
impl ::std::clone::Clone for Struct__libc_fpstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fpregset_t = *mut Struct__libc_fpstate;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed43 {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::libc::c_ulonglong; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed43 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed43 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = Struct_Unnamed43;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ucontext {
    pub uc_flags: ::libc::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub __fpregs_mem: Struct__libc_fpstate,
}
impl ::std::clone::Clone for Struct_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct_ucontext;
pub type Enum_Unnamed44 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed44;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed45 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed45 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed45 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed45 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed45;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed46 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed47 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed46 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed46 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed46 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed47 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed47 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed47 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_rusage { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::libc::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: Struct_timespec,
    pub st_mtim: Struct_timespec,
    pub st_ctim: Struct_timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
impl ::std::clone::Clone for Struct_stat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed48;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed49 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed49 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed49 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed49;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed50 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed50 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed50 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed50;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void,
                                        arg2: *const ::libc::c_void)
                              -> ::libc::c_int>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::libc::c_ushort,
    pub d_type: ::libc::c_uchar,
    pub d_name: [::libc::c_char; 256usize],
}
impl ::std::clone::Clone for Struct_dirent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dirent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed51 = ::libc::c_uint;
pub const DT_UNKNOWN: ::libc::c_uint = 0;
pub const DT_FIFO: ::libc::c_uint = 1;
pub const DT_CHR: ::libc::c_uint = 2;
pub const DT_DIR: ::libc::c_uint = 4;
pub const DT_BLK: ::libc::c_uint = 6;
pub const DT_REG: ::libc::c_uint = 8;
pub const DT_LNK: ::libc::c_uint = 10;
pub const DT_SOCK: ::libc::c_uint = 12;
pub const DT_WHT: ::libc::c_uint = 14;
pub enum Struct___dirstream { }
pub type DIR = Struct___dirstream;
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_char; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_param {
    pub __sched_priority: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sched_param {
    pub __sched_priority: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __cpu_mask = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed52 {
    pub __bits: [__cpu_mask; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed52 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed52 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cpu_set_t = Struct_Unnamed52;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_char,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __jmp_buf = [::libc::c_long; 8usize];
pub type Enum_Unnamed53 = ::libc::c_uint;
pub const PTHREAD_CREATE_JOINABLE: ::libc::c_uint = 0;
pub const PTHREAD_CREATE_DETACHED: ::libc::c_uint = 1;
pub type Enum_Unnamed54 = ::libc::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: ::libc::c_uint = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: ::libc::c_uint = 3;
pub const PTHREAD_MUTEX_NORMAL: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: ::libc::c_uint = 2;
pub const PTHREAD_MUTEX_DEFAULT: ::libc::c_uint = 0;
pub type Enum_Unnamed55 = ::libc::c_uint;
pub const PTHREAD_MUTEX_STALLED: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_STALLED_NP: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_ROBUST: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: ::libc::c_uint = 1;
pub type Enum_Unnamed56 = ::libc::c_uint;
pub const PTHREAD_PRIO_NONE: ::libc::c_uint = 0;
pub const PTHREAD_PRIO_INHERIT: ::libc::c_uint = 1;
pub const PTHREAD_PRIO_PROTECT: ::libc::c_uint = 2;
pub type Enum_Unnamed57 = ::libc::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: ::libc::c_uint = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: ::libc::c_uint = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: ::libc::c_uint = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: ::libc::c_uint = 0;
pub type Enum_Unnamed58 = ::libc::c_uint;
pub const PTHREAD_INHERIT_SCHED: ::libc::c_uint = 0;
pub const PTHREAD_EXPLICIT_SCHED: ::libc::c_uint = 1;
pub type Enum_Unnamed59 = ::libc::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: ::libc::c_uint = 0;
pub const PTHREAD_SCOPE_PROCESS: ::libc::c_uint = 1;
pub type Enum_Unnamed60 = ::libc::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: ::libc::c_uint = 0;
pub const PTHREAD_PROCESS_SHARED: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __canceltype: ::libc::c_int,
    pub __prev: *mut Struct__pthread_cleanup_buffer,
}
impl ::std::clone::Clone for Struct__pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__pthread_cleanup_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed61 = ::libc::c_uint;
pub const PTHREAD_CANCEL_ENABLE: ::libc::c_uint = 0;
pub const PTHREAD_CANCEL_DISABLE: ::libc::c_uint = 1;
pub type Enum_Unnamed62 = ::libc::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: ::libc::c_uint = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed63 {
    pub __cancel_jmp_buf: [Struct_Unnamed64; 1usize],
    pub __pad: [*mut ::libc::c_void; 4usize],
}
impl ::std::clone::Clone for Struct_Unnamed63 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed63 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed64 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_unwind_buf_t = Struct_Unnamed63;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<extern "C" fn(arg1:
                                                                  *mut ::libc::c_void)
                                                    -> ()>,
    pub __cancel_arg: *mut ::libc::c_void,
    pub __do_it: ::libc::c_int,
    pub __cancel_type: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_cleanup_frame {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___jmp_buf_tag { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_option {
    pub name: *const ::libc::c_char,
    pub has_arg: ::libc::c_int,
    pub flag: *mut ::libc::c_int,
    pub val: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_option {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_option {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_group {
    pub gr_name: *mut ::libc::c_char,
    pub gr_passwd: *mut ::libc::c_char,
    pub gr_gid: __gid_t,
    pub gr_mem: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_group {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_group {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_passwd {
    pub pw_name: *mut ::libc::c_char,
    pub pw_passwd: *mut ::libc::c_char,
    pub pw_uid: __uid_t,
    pub pw_gid: __gid_t,
    pub pw_gecos: *mut ::libc::c_char,
    pub pw_dir: *mut ::libc::c_char,
    pub pw_shell: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_passwd {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_passwd {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_flock {
    pub l_type: ::libc::c_short,
    pub l_whence: ::libc::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
impl ::std::clone::Clone for Struct_flock {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_flock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host = Struct_host_struct;
pub type service = Struct_service_struct;
pub type contact = Struct_contact_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_objectlist_struct {
    pub object_ptr: *mut ::libc::c_void,
    pub next: *mut Struct_objectlist_struct,
}
impl ::std::clone::Clone for Struct_objectlist_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_objectlist_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type objectlist = Struct_objectlist_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timerange_struct {
    pub range_start: ::libc::c_ulong,
    pub range_end: ::libc::c_ulong,
    pub next: *mut Struct_timerange_struct,
}
impl ::std::clone::Clone for Struct_timerange_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timerange_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timerange = Struct_timerange_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_daterange_struct {
    pub _type: ::libc::c_int,
    pub syear: ::libc::c_int,
    pub smon: ::libc::c_int,
    pub smday: ::libc::c_int,
    pub swday: ::libc::c_int,
    pub swday_offset: ::libc::c_int,
    pub eyear: ::libc::c_int,
    pub emon: ::libc::c_int,
    pub emday: ::libc::c_int,
    pub ewday: ::libc::c_int,
    pub ewday_offset: ::libc::c_int,
    pub skip_interval: ::libc::c_int,
    pub times: *mut timerange,
    pub next: *mut Struct_daterange_struct,
}
impl ::std::clone::Clone for Struct_daterange_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_daterange_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type daterange = Struct_daterange_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeperiodexclusion_struct {
    pub timeperiod_name: *mut ::libc::c_char,
    pub timeperiod_ptr: *mut Struct_timeperiod_struct,
    pub next: *mut Struct_timeperiodexclusion_struct,
}
impl ::std::clone::Clone for Struct_timeperiodexclusion_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeperiodexclusion_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timeperiodexclusion = Struct_timeperiodexclusion_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeperiod_struct {
    pub name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub days: [*mut timerange; 7usize],
    pub exceptions: [*mut daterange; 5usize],
    pub exclusions: *mut timeperiodexclusion,
    pub next: *mut Struct_timeperiod_struct,
    pub nexthash: *mut Struct_timeperiod_struct,
}
impl ::std::clone::Clone for Struct_timeperiod_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeperiod_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timeperiod = Struct_timeperiod_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contactsmember_struct {
    pub contact_name: *mut ::libc::c_char,
    pub next: *mut Struct_contactsmember_struct,
}
impl ::std::clone::Clone for Struct_contactsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contactsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type contactsmember = Struct_contactsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contactgroup_struct {
    pub group_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub members: *mut contactsmember,
    pub next: *mut Struct_contactgroup_struct,
    pub nexthash: *mut Struct_contactgroup_struct,
}
impl ::std::clone::Clone for Struct_contactgroup_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contactgroup_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type contactgroup = Struct_contactgroup_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contactgroupsmember_struct {
    pub group_name: *mut ::libc::c_char,
    pub next: *mut Struct_contactgroupsmember_struct,
}
impl ::std::clone::Clone for Struct_contactgroupsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contactgroupsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type contactgroupsmember = Struct_contactgroupsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_customvariablesmember_struct {
    pub variable_name: *mut ::libc::c_char,
    pub variable_value: *mut ::libc::c_char,
    pub has_been_modified: ::libc::c_int,
    pub next: *mut Struct_customvariablesmember_struct,
}
impl ::std::clone::Clone for Struct_customvariablesmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_customvariablesmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type customvariablesmember = Struct_customvariablesmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_command_struct {
    pub name: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub next: *mut Struct_command_struct,
    pub nexthash: *mut Struct_command_struct,
}
impl ::std::clone::Clone for Struct_command_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_command_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type command = Struct_command_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_commandsmember_struct {
    pub command: *mut ::libc::c_char,
    pub next: *mut Struct_commandsmember_struct,
}
impl ::std::clone::Clone for Struct_commandsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_commandsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type commandsmember = Struct_commandsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_contact_struct {
    pub name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub email: *mut ::libc::c_char,
    pub pager: *mut ::libc::c_char,
    pub address: [*mut ::libc::c_char; 6usize],
    pub host_notification_commands: *mut commandsmember,
    pub service_notification_commands: *mut commandsmember,
    pub notify_on_service_unknown: ::libc::c_int,
    pub notify_on_service_warning: ::libc::c_int,
    pub notify_on_service_critical: ::libc::c_int,
    pub notify_on_service_recovery: ::libc::c_int,
    pub notify_on_service_flapping: ::libc::c_int,
    pub notify_on_service_downtime: ::libc::c_int,
    pub notify_on_host_down: ::libc::c_int,
    pub notify_on_host_unreachable: ::libc::c_int,
    pub notify_on_host_recovery: ::libc::c_int,
    pub notify_on_host_flapping: ::libc::c_int,
    pub notify_on_host_downtime: ::libc::c_int,
    pub host_notification_period: *mut ::libc::c_char,
    pub service_notification_period: *mut ::libc::c_char,
    pub host_notifications_enabled: ::libc::c_int,
    pub service_notifications_enabled: ::libc::c_int,
    pub can_submit_commands: ::libc::c_int,
    pub retain_status_information: ::libc::c_int,
    pub retain_nonstatus_information: ::libc::c_int,
    pub custom_variables: *mut customvariablesmember,
    pub next: *mut Struct_contact_struct,
    pub nexthash: *mut Struct_contact_struct,
}
impl ::std::clone::Clone for Struct_contact_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_contact_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servicesmember_struct {
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub next: *mut Struct_servicesmember_struct,
}
impl ::std::clone::Clone for Struct_servicesmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servicesmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type servicesmember = Struct_servicesmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostsmember_struct {
    pub host_name: *mut ::libc::c_char,
    pub next: *mut Struct_hostsmember_struct,
}
impl ::std::clone::Clone for Struct_hostsmember_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostsmember_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostsmember = Struct_hostsmember_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostgroup_struct {
    pub group_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub members: *mut hostsmember,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub next: *mut Struct_hostgroup_struct,
    pub nexthash: *mut Struct_hostgroup_struct,
}
impl ::std::clone::Clone for Struct_hostgroup_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostgroup_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostgroup = Struct_hostgroup_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_struct {
    pub name: *mut ::libc::c_char,
    pub display_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub address: *mut ::libc::c_char,
    pub parent_hosts: *mut hostsmember,
    pub child_hosts: *mut hostsmember,
    pub services: *mut servicesmember,
    pub host_check_command: *mut ::libc::c_char,
    pub initial_state: ::libc::c_int,
    pub check_interval: ::libc::c_double,
    pub retry_interval: ::libc::c_double,
    pub max_attempts: ::libc::c_int,
    pub event_handler: *mut ::libc::c_char,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub notification_interval: ::libc::c_double,
    pub first_notification_delay: ::libc::c_double,
    pub notify_on_down: ::libc::c_int,
    pub notify_on_unreachable: ::libc::c_int,
    pub notify_on_recovery: ::libc::c_int,
    pub notify_on_flapping: ::libc::c_int,
    pub notify_on_downtime: ::libc::c_int,
    pub notification_period: *mut ::libc::c_char,
    pub check_period: *mut ::libc::c_char,
    pub flap_detection_enabled: ::libc::c_int,
    pub low_flap_threshold: ::libc::c_double,
    pub high_flap_threshold: ::libc::c_double,
    pub flap_detection_on_up: ::libc::c_int,
    pub flap_detection_on_down: ::libc::c_int,
    pub flap_detection_on_unreachable: ::libc::c_int,
    pub stalk_on_up: ::libc::c_int,
    pub stalk_on_down: ::libc::c_int,
    pub stalk_on_unreachable: ::libc::c_int,
    pub check_freshness: ::libc::c_int,
    pub freshness_threshold: ::libc::c_int,
    pub process_performance_data: ::libc::c_int,
    pub checks_enabled: ::libc::c_int,
    pub accept_passive_host_checks: ::libc::c_int,
    pub event_handler_enabled: ::libc::c_int,
    pub retain_status_information: ::libc::c_int,
    pub retain_nonstatus_information: ::libc::c_int,
    pub failure_prediction_enabled: ::libc::c_int,
    pub failure_prediction_options: *mut ::libc::c_char,
    pub obsess_over_host: ::libc::c_int,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub icon_image: *mut ::libc::c_char,
    pub icon_image_alt: *mut ::libc::c_char,
    pub vrml_image: *mut ::libc::c_char,
    pub statusmap_image: *mut ::libc::c_char,
    pub have_2d_coords: ::libc::c_int,
    pub x_2d: ::libc::c_int,
    pub y_2d: ::libc::c_int,
    pub have_3d_coords: ::libc::c_int,
    pub x_3d: ::libc::c_double,
    pub y_3d: ::libc::c_double,
    pub z_3d: ::libc::c_double,
    pub should_be_drawn: ::libc::c_int,
    pub custom_variables: *mut customvariablesmember,
    pub next: *mut Struct_host_struct,
    pub nexthash: *mut Struct_host_struct,
}
impl ::std::clone::Clone for Struct_host_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servicegroup_struct {
    pub group_name: *mut ::libc::c_char,
    pub alias: *mut ::libc::c_char,
    pub members: *mut servicesmember,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub next: *mut Struct_servicegroup_struct,
    pub nexthash: *mut Struct_servicegroup_struct,
}
impl ::std::clone::Clone for Struct_servicegroup_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servicegroup_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type servicegroup = Struct_servicegroup_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_service_struct {
    pub host_name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub display_name: *mut ::libc::c_char,
    pub service_check_command: *mut ::libc::c_char,
    pub event_handler: *mut ::libc::c_char,
    pub initial_state: ::libc::c_int,
    pub check_interval: ::libc::c_double,
    pub retry_interval: ::libc::c_double,
    pub max_attempts: ::libc::c_int,
    pub parallelize: ::libc::c_int,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub notification_interval: ::libc::c_double,
    pub first_notification_delay: ::libc::c_double,
    pub notify_on_unknown: ::libc::c_int,
    pub notify_on_warning: ::libc::c_int,
    pub notify_on_critical: ::libc::c_int,
    pub notify_on_recovery: ::libc::c_int,
    pub notify_on_flapping: ::libc::c_int,
    pub notify_on_downtime: ::libc::c_int,
    pub stalk_on_ok: ::libc::c_int,
    pub stalk_on_warning: ::libc::c_int,
    pub stalk_on_unknown: ::libc::c_int,
    pub stalk_on_critical: ::libc::c_int,
    pub is_volatile: ::libc::c_int,
    pub notification_period: *mut ::libc::c_char,
    pub check_period: *mut ::libc::c_char,
    pub flap_detection_enabled: ::libc::c_int,
    pub low_flap_threshold: ::libc::c_double,
    pub high_flap_threshold: ::libc::c_double,
    pub flap_detection_on_ok: ::libc::c_int,
    pub flap_detection_on_warning: ::libc::c_int,
    pub flap_detection_on_unknown: ::libc::c_int,
    pub flap_detection_on_critical: ::libc::c_int,
    pub process_performance_data: ::libc::c_int,
    pub check_freshness: ::libc::c_int,
    pub freshness_threshold: ::libc::c_int,
    pub accept_passive_service_checks: ::libc::c_int,
    pub event_handler_enabled: ::libc::c_int,
    pub checks_enabled: ::libc::c_int,
    pub retain_status_information: ::libc::c_int,
    pub retain_nonstatus_information: ::libc::c_int,
    pub notifications_enabled: ::libc::c_int,
    pub obsess_over_service: ::libc::c_int,
    pub failure_prediction_enabled: ::libc::c_int,
    pub failure_prediction_options: *mut ::libc::c_char,
    pub notes: *mut ::libc::c_char,
    pub notes_url: *mut ::libc::c_char,
    pub action_url: *mut ::libc::c_char,
    pub icon_image: *mut ::libc::c_char,
    pub icon_image_alt: *mut ::libc::c_char,
    pub custom_variables: *mut customvariablesmember,
    pub next: *mut Struct_service_struct,
    pub nexthash: *mut Struct_service_struct,
}
impl ::std::clone::Clone for Struct_service_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_service_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_serviceescalation_struct {
    pub host_name: *mut ::libc::c_char,
    pub description: *mut ::libc::c_char,
    pub first_notification: ::libc::c_int,
    pub last_notification: ::libc::c_int,
    pub notification_interval: ::libc::c_double,
    pub escalation_period: *mut ::libc::c_char,
    pub escalate_on_recovery: ::libc::c_int,
    pub escalate_on_warning: ::libc::c_int,
    pub escalate_on_unknown: ::libc::c_int,
    pub escalate_on_critical: ::libc::c_int,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub next: *mut Struct_serviceescalation_struct,
    pub nexthash: *mut Struct_serviceescalation_struct,
}
impl ::std::clone::Clone for Struct_serviceescalation_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_serviceescalation_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type serviceescalation = Struct_serviceescalation_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_servicedependency_struct {
    pub dependency_type: ::libc::c_int,
    pub dependent_host_name: *mut ::libc::c_char,
    pub dependent_service_description: *mut ::libc::c_char,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub dependency_period: *mut ::libc::c_char,
    pub inherits_parent: ::libc::c_int,
    pub fail_on_ok: ::libc::c_int,
    pub fail_on_warning: ::libc::c_int,
    pub fail_on_unknown: ::libc::c_int,
    pub fail_on_critical: ::libc::c_int,
    pub fail_on_pending: ::libc::c_int,
    pub next: *mut Struct_servicedependency_struct,
    pub nexthash: *mut Struct_servicedependency_struct,
}
impl ::std::clone::Clone for Struct_servicedependency_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_servicedependency_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type servicedependency = Struct_servicedependency_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostescalation_struct {
    pub host_name: *mut ::libc::c_char,
    pub first_notification: ::libc::c_int,
    pub last_notification: ::libc::c_int,
    pub notification_interval: ::libc::c_double,
    pub escalation_period: *mut ::libc::c_char,
    pub escalate_on_recovery: ::libc::c_int,
    pub escalate_on_down: ::libc::c_int,
    pub escalate_on_unreachable: ::libc::c_int,
    pub contact_groups: *mut contactgroupsmember,
    pub contacts: *mut contactsmember,
    pub next: *mut Struct_hostescalation_struct,
    pub nexthash: *mut Struct_hostescalation_struct,
}
impl ::std::clone::Clone for Struct_hostescalation_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostescalation_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostescalation = Struct_hostescalation_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hostdependency_struct {
    pub dependency_type: ::libc::c_int,
    pub dependent_host_name: *mut ::libc::c_char,
    pub host_name: *mut ::libc::c_char,
    pub dependency_period: *mut ::libc::c_char,
    pub inherits_parent: ::libc::c_int,
    pub fail_on_up: ::libc::c_int,
    pub fail_on_down: ::libc::c_int,
    pub fail_on_unreachable: ::libc::c_int,
    pub fail_on_pending: ::libc::c_int,
    pub next: *mut Struct_hostdependency_struct,
    pub nexthash: *mut Struct_hostdependency_struct,
}
impl ::std::clone::Clone for Struct_hostdependency_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hostdependency_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type hostdependency = Struct_hostdependency_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_host_cursor_struct {
    pub host_hashchain_iterator: ::libc::c_int,
    pub current_host_pointer: *mut host,
}
impl ::std::clone::Clone for Struct_host_cursor_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_host_cursor_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type host_cursor = Struct_host_cursor_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timed_event_struct {
    pub event_type: ::libc::c_int,
    pub run_time: time_t,
    pub recurring: ::libc::c_int,
    pub event_interval: ::libc::c_ulong,
    pub compensate_for_time_change: ::libc::c_int,
    pub timing_func: *mut ::libc::c_void,
    pub event_data: *mut ::libc::c_void,
    pub event_args: *mut ::libc::c_void,
    pub event_options: ::libc::c_int,
    pub next: *mut Struct_timed_event_struct,
    pub prev: *mut Struct_timed_event_struct,
}
impl ::std::clone::Clone for Struct_timed_event_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timed_event_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type timed_event = Struct_timed_event_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_notify_list_struct {
    pub contact: *mut contact,
    pub next: *mut Struct_notify_list_struct,
}
impl ::std::clone::Clone for Struct_notify_list_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_notify_list_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type notification = Struct_notify_list_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_check_result_struct {
    pub object_check_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub check_type: ::libc::c_int,
    pub check_options: ::libc::c_int,
    pub scheduled_check: ::libc::c_int,
    pub reschedule_check: ::libc::c_int,
    pub output_file: *mut ::libc::c_char,
    pub output_file_fp: *mut FILE,
    pub output_file_fd: ::libc::c_int,
    pub latency: ::libc::c_double,
    pub start_time: Struct_timeval,
    pub finish_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub exited_ok: ::libc::c_int,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub next: *mut Struct_check_result_struct,
}
impl ::std::clone::Clone for Struct_check_result_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_check_result_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type check_result = Struct_check_result_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_info_struct {
    pub total_services: ::libc::c_int,
    pub total_scheduled_services: ::libc::c_int,
    pub total_hosts: ::libc::c_int,
    pub total_scheduled_hosts: ::libc::c_int,
    pub average_services_per_host: ::libc::c_double,
    pub average_scheduled_services_per_host: ::libc::c_double,
    pub service_check_interval_total: ::libc::c_ulong,
    pub host_check_interval_total: ::libc::c_ulong,
    pub average_service_execution_time: ::libc::c_double,
    pub average_service_check_interval: ::libc::c_double,
    pub average_host_check_interval: ::libc::c_double,
    pub average_service_inter_check_delay: ::libc::c_double,
    pub average_host_inter_check_delay: ::libc::c_double,
    pub service_inter_check_delay: ::libc::c_double,
    pub host_inter_check_delay: ::libc::c_double,
    pub service_interleave_factor: ::libc::c_int,
    pub max_service_check_spread: ::libc::c_int,
    pub max_host_check_spread: ::libc::c_int,
    pub first_service_check: time_t,
    pub last_service_check: time_t,
    pub first_host_check: time_t,
    pub last_host_check: time_t,
}
impl ::std::clone::Clone for Struct_sched_info_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_info_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sched_info = Struct_sched_info_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_passive_check_result_struct {
    pub object_check_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub check_time: time_t,
    pub latency: ::libc::c_double,
    pub next: *mut Struct_passive_check_result_struct,
}
impl ::std::clone::Clone for Struct_passive_check_result_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_passive_check_result_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type passive_check_result = Struct_passive_check_result_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_circular_buffer_struct {
    pub buffer: *mut *mut ::libc::c_void,
    pub tail: ::libc::c_int,
    pub head: ::libc::c_int,
    pub items: ::libc::c_int,
    pub high: ::libc::c_int,
    pub overflow: ::libc::c_ulong,
    pub buffer_lock: pthread_mutex_t,
}
impl ::std::clone::Clone for Struct_circular_buffer_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_circular_buffer_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type circular_buffer = Struct_circular_buffer_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_mmapfile_struct {
    pub path: *mut ::libc::c_char,
    pub mode: ::libc::c_int,
    pub fd: ::libc::c_int,
    pub file_size: ::libc::c_ulong,
    pub current_position: ::libc::c_ulong,
    pub current_line: ::libc::c_ulong,
    pub mmap_buf: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_mmapfile_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_mmapfile_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mmapfile = Struct_mmapfile_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_dbuf_struct {
    pub buf: *mut ::libc::c_char,
    pub used_size: ::libc::c_ulong,
    pub allocated_size: ::libc::c_ulong,
    pub chunk_size: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_dbuf_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_dbuf_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type dbuf = Struct_dbuf_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_check_stats_struct {
    pub current_bucket: ::libc::c_int,
    pub bucket: [::libc::c_int; 15usize],
    pub overflow_bucket: ::libc::c_int,
    pub minute_stats: [::libc::c_int; 3usize],
    pub last_update: time_t,
}
impl ::std::clone::Clone for Struct_check_stats_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_check_stats_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type check_stats = Struct_check_stats_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_process_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_nebstruct_process_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_process_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_process_data = Struct_nebstruct_process_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_timed_event_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub event_type: ::libc::c_int,
    pub recurring: ::libc::c_int,
    pub run_time: time_t,
    pub event_data: *mut ::libc::c_void,
    pub event_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_timed_event_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_timed_event_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_timed_event_data = Struct_nebstruct_timed_event_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_log_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub entry_time: time_t,
    pub data_type: ::libc::c_int,
    pub data: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_log_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_log_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_log_data = Struct_nebstruct_log_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_system_command_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub timeout: ::libc::c_int,
    pub command_line: *mut ::libc::c_char,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_system_command_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_system_command_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_system_command_data =
    Struct_nebstruct_system_command_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_event_handler_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub eventhandler_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub state_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub timeout: ::libc::c_int,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_event_handler_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_event_handler_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_event_handler_data = Struct_nebstruct_event_handler_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_host_check_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub current_attempt: ::libc::c_int,
    pub check_type: ::libc::c_int,
    pub max_attempts: ::libc::c_int,
    pub state_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub timeout: ::libc::c_int,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub latency: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub long_output: *mut ::libc::c_char,
    pub perf_data: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_host_check_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_host_check_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_host_check_data = Struct_nebstruct_host_check_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_service_check_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub check_type: ::libc::c_int,
    pub current_attempt: ::libc::c_int,
    pub max_attempts: ::libc::c_int,
    pub state_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub timeout: ::libc::c_int,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub command_line: *mut ::libc::c_char,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub early_timeout: ::libc::c_int,
    pub execution_time: ::libc::c_double,
    pub latency: ::libc::c_double,
    pub return_code: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub long_output: *mut ::libc::c_char,
    pub perf_data: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_service_check_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_service_check_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_service_check_data = Struct_nebstruct_service_check_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_comment_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub comment_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub entry_time: time_t,
    pub author_name: *mut ::libc::c_char,
    pub comment_data: *mut ::libc::c_char,
    pub persistent: ::libc::c_int,
    pub source: ::libc::c_int,
    pub entry_type: ::libc::c_int,
    pub expires: ::libc::c_int,
    pub expire_time: time_t,
    pub comment_id: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_comment_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_comment_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_comment_data = Struct_nebstruct_comment_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_downtime_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub downtime_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub entry_time: time_t,
    pub author_name: *mut ::libc::c_char,
    pub comment_data: *mut ::libc::c_char,
    pub start_time: time_t,
    pub end_time: time_t,
    pub fixed: ::libc::c_int,
    pub duration: ::libc::c_ulong,
    pub triggered_by: ::libc::c_ulong,
    pub downtime_id: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_downtime_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_downtime_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_downtime_data = Struct_nebstruct_downtime_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_flapping_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub flapping_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub percent_change: ::libc::c_double,
    pub high_threshold: ::libc::c_double,
    pub low_threshold: ::libc::c_double,
    pub comment_id: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_flapping_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_flapping_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_flapping_data = Struct_nebstruct_flapping_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_program_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub program_start: time_t,
    pub pid: ::libc::c_int,
    pub daemon_mode: ::libc::c_int,
    pub last_command_check: time_t,
    pub last_log_rotation: time_t,
    pub notifications_enabled: ::libc::c_int,
    pub active_service_checks_enabled: ::libc::c_int,
    pub passive_service_checks_enabled: ::libc::c_int,
    pub active_host_checks_enabled: ::libc::c_int,
    pub passive_host_checks_enabled: ::libc::c_int,
    pub event_handlers_enabled: ::libc::c_int,
    pub flap_detection_enabled: ::libc::c_int,
    pub failure_prediction_enabled: ::libc::c_int,
    pub process_performance_data: ::libc::c_int,
    pub obsess_over_hosts: ::libc::c_int,
    pub obsess_over_services: ::libc::c_int,
    pub modified_host_attributes: ::libc::c_ulong,
    pub modified_service_attributes: ::libc::c_ulong,
    pub global_host_event_handler: *mut ::libc::c_char,
    pub global_service_event_handler: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_program_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_program_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_program_status_data =
    Struct_nebstruct_program_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_host_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_host_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_host_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_host_status_data = Struct_nebstruct_host_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_service_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_service_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_service_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_service_status_data =
    Struct_nebstruct_service_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_contact_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_contact_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_contact_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_contact_status_data =
    Struct_nebstruct_contact_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_notification_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub notification_type: ::libc::c_int,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub reason_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub ack_author: *mut ::libc::c_char,
    pub ack_data: *mut ::libc::c_char,
    pub escalated: ::libc::c_int,
    pub contacts_notified: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_notification_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_notification_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_notification_data = Struct_nebstruct_notification_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_contact_notification_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub notification_type: ::libc::c_int,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub contact_name: *mut ::libc::c_char,
    pub reason_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub ack_author: *mut ::libc::c_char,
    pub ack_data: *mut ::libc::c_char,
    pub escalated: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
    pub contact_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_contact_notification_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_contact_notification_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_contact_notification_data =
    Struct_nebstruct_contact_notification_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_contact_notification_method_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub notification_type: ::libc::c_int,
    pub start_time: Struct_timeval,
    pub end_time: Struct_timeval,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub contact_name: *mut ::libc::c_char,
    pub command_name: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
    pub reason_type: ::libc::c_int,
    pub state: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub ack_author: *mut ::libc::c_char,
    pub ack_data: *mut ::libc::c_char,
    pub escalated: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
    pub contact_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for
 Struct_nebstruct_contact_notification_method_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for
 Struct_nebstruct_contact_notification_method_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_contact_notification_method_data =
    Struct_nebstruct_contact_notification_method_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_program_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_host_attribute: ::libc::c_ulong,
    pub modified_host_attributes: ::libc::c_ulong,
    pub modified_service_attribute: ::libc::c_ulong,
    pub modified_service_attributes: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_program_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_program_data_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_program_data =
    Struct_nebstruct_adaptive_program_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_host_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_attribute: ::libc::c_ulong,
    pub modified_attributes: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_host_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_host_data_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_host_data =
    Struct_nebstruct_adaptive_host_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_service_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_attribute: ::libc::c_ulong,
    pub modified_attributes: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_service_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_service_data_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_service_data =
    Struct_nebstruct_adaptive_service_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_adaptive_contact_data_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub modified_attribute: ::libc::c_ulong,
    pub modified_attributes: ::libc::c_ulong,
    pub modified_host_attribute: ::libc::c_ulong,
    pub modified_host_attributes: ::libc::c_ulong,
    pub modified_service_attribute: ::libc::c_ulong,
    pub modified_service_attributes: ::libc::c_ulong,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_adaptive_contact_data_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_adaptive_contact_data_struct
 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_adaptive_contact_data =
    Struct_nebstruct_adaptive_contact_data_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_external_command_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub command_type: ::libc::c_int,
    pub entry_time: time_t,
    pub command_string: *mut ::libc::c_char,
    pub command_args: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_nebstruct_external_command_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_external_command_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_external_command_data =
    Struct_nebstruct_external_command_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_aggregated_status_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_nebstruct_aggregated_status_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_aggregated_status_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_aggregated_status_data =
    Struct_nebstruct_aggregated_status_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_retention_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
}
impl ::std::clone::Clone for Struct_nebstruct_retention_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_retention_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_retention_data = Struct_nebstruct_retention_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_acknowledgement_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub acknowledgement_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub state: ::libc::c_int,
    pub author_name: *mut ::libc::c_char,
    pub comment_data: *mut ::libc::c_char,
    pub is_sticky: ::libc::c_int,
    pub persistent_comment: ::libc::c_int,
    pub notify_contacts: ::libc::c_int,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_acknowledgement_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_acknowledgement_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_acknowledgement_data =
    Struct_nebstruct_acknowledgement_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nebstruct_statechange_struct {
    pub _type: ::libc::c_int,
    pub flags: ::libc::c_int,
    pub attr: ::libc::c_int,
    pub timestamp: Struct_timeval,
    pub statechange_type: ::libc::c_int,
    pub host_name: *mut ::libc::c_char,
    pub service_description: *mut ::libc::c_char,
    pub state: ::libc::c_int,
    pub state_type: ::libc::c_int,
    pub current_attempt: ::libc::c_int,
    pub max_attempts: ::libc::c_int,
    pub output: *mut ::libc::c_char,
    pub object_ptr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_nebstruct_statechange_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nebstruct_statechange_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nebstruct_statechange_data = Struct_nebstruct_statechange_struct;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pnp_mmapfile_struct {
    pub path: *mut ::libc::c_char,
    pub mode: ::libc::c_int,
    pub fd: ::libc::c_int,
    pub file_size: ::libc::c_ulong,
    pub current_position: ::libc::c_ulong,
    pub current_line: ::libc::c_ulong,
    pub mmap_buf: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_pnp_mmapfile_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pnp_mmapfile_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pnp_mmapfile = Struct_pnp_mmapfile_struct;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
    pub static mut __environ: *mut *mut ::libc::c_char;
    pub static mut optarg: *mut ::libc::c_char;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut _sys_siglist: [*const ::libc::c_char; 65usize];
    pub static mut sys_siglist: [*const ::libc::c_char; 65usize];
    pub static mut __tzname: [*mut ::libc::c_char; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_char; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
}
extern "C" {
    pub fn neb_set_module_info(arg1: *mut ::libc::c_void, arg2: ::libc::c_int,
                               arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn neb_register_callback(callback_type: ::libc::c_int,
                                 mod_handle: *mut ::libc::c_void,
                                 priority: ::libc::c_int,
                                 callback_func:
                                     ::std::option::Option<extern "C" fn(arg1:
                                                                             ::libc::c_int,
                                                                         arg2:
                                                                             *mut ::libc::c_void)
                                                               ->
                                                                   ::libc::c_int>)
     -> ::libc::c_int;
    pub fn neb_deregister_callback(callback_type: ::libc::c_int,
                                   callback_func:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               ::libc::c_int,
                                                                           arg2:
                                                                               *mut ::libc::c_void)
                                                                 ->
                                                                     ::libc::c_int>)
     -> ::libc::c_int;
    pub fn neb_deregister_module_callbacks(arg1: *mut nebmodule)
     -> ::libc::c_int;
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn gets(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn __errno_location() -> *mut ::libc::c_int;
    pub fn access(__name: *const ::libc::c_char, __type: ::libc::c_int)
     -> ::libc::c_int;
    pub fn faccessat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                     __type: ::libc::c_int, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lseek(__fd: ::libc::c_int, __offset: __off_t,
                 __whence: ::libc::c_int) -> __off_t;
    pub fn close(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn read(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                __nbytes: size_t) -> ssize_t;
    pub fn write(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                 __n: size_t) -> ssize_t;
    pub fn pread(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                 __nbytes: size_t, __offset: __off_t) -> ssize_t;
    pub fn pwrite(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                  __n: size_t, __offset: __off_t) -> ssize_t;
    pub fn pipe(__pipedes: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn alarm(__seconds: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sleep(__seconds: ::libc::c_uint) -> ::libc::c_uint;
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
    pub fn usleep(__useconds: __useconds_t) -> ::libc::c_int;
    pub fn pause() -> ::libc::c_int;
    pub fn chown(__file: *const ::libc::c_char, __owner: __uid_t,
                 __group: __gid_t) -> ::libc::c_int;
    pub fn fchown(__fd: ::libc::c_int, __owner: __uid_t, __group: __gid_t)
     -> ::libc::c_int;
    pub fn lchown(__file: *const ::libc::c_char, __owner: __uid_t,
                  __group: __gid_t) -> ::libc::c_int;
    pub fn fchownat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                    __owner: __uid_t, __group: __gid_t, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn chdir(__path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn fchdir(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn getcwd(__buf: *mut ::libc::c_char, __size: size_t)
     -> *mut ::libc::c_char;
    pub fn getwd(__buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn dup(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(__fd: ::libc::c_int, __fd2: ::libc::c_int) -> ::libc::c_int;
    pub fn execve(__path: *const ::libc::c_char,
                  __argv: *const *mut ::libc::c_char,
                  __envp: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn fexecve(__fd: ::libc::c_int, __argv: *const *mut ::libc::c_char,
                   __envp: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execv(__path: *const ::libc::c_char,
                 __argv: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execle(__path: *const ::libc::c_char,
                  __arg: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execl(__path: *const ::libc::c_char,
                 __arg: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn execvp(__file: *const ::libc::c_char,
                  __argv: *const *mut ::libc::c_char) -> ::libc::c_int;
    pub fn execlp(__file: *const ::libc::c_char,
                  __arg: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn nice(__inc: ::libc::c_int) -> ::libc::c_int;
    pub fn _exit(__status: ::libc::c_int) -> ();
    pub fn pathconf(__path: *const ::libc::c_char, __name: ::libc::c_int)
     -> ::libc::c_long;
    pub fn fpathconf(__fd: ::libc::c_int, __name: ::libc::c_int)
     -> ::libc::c_long;
    pub fn sysconf(__name: ::libc::c_int) -> ::libc::c_long;
    pub fn confstr(__name: ::libc::c_int, __buf: *mut ::libc::c_char,
                   __len: size_t) -> size_t;
    pub fn getpid() -> __pid_t;
    pub fn getppid() -> __pid_t;
    pub fn getpgrp() -> __pid_t;
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::libc::c_int;
    pub fn setpgrp() -> ::libc::c_int;
    pub fn setsid() -> __pid_t;
    pub fn getsid(__pid: __pid_t) -> __pid_t;
    pub fn getuid() -> __uid_t;
    pub fn geteuid() -> __uid_t;
    pub fn getgid() -> __gid_t;
    pub fn getegid() -> __gid_t;
    pub fn getgroups(__size: ::libc::c_int, __list: *mut __gid_t)
     -> ::libc::c_int;
    pub fn setuid(__uid: __uid_t) -> ::libc::c_int;
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::libc::c_int;
    pub fn seteuid(__uid: __uid_t) -> ::libc::c_int;
    pub fn setgid(__gid: __gid_t) -> ::libc::c_int;
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::libc::c_int;
    pub fn setegid(__gid: __gid_t) -> ::libc::c_int;
    pub fn fork() -> __pid_t;
    pub fn vfork() -> __pid_t;
    pub fn ttyname(__fd: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn ttyname_r(__fd: ::libc::c_int, __buf: *mut ::libc::c_char,
                     __buflen: size_t) -> ::libc::c_int;
    pub fn isatty(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn link(__from: *const ::libc::c_char, __to: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn linkat(__fromfd: ::libc::c_int, __from: *const ::libc::c_char,
                  __tofd: ::libc::c_int, __to: *const ::libc::c_char,
                  __flags: ::libc::c_int) -> ::libc::c_int;
    pub fn symlink(__from: *const ::libc::c_char, __to: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn readlink(__path: *const ::libc::c_char, __buf: *mut ::libc::c_char,
                    __len: size_t) -> ssize_t;
    pub fn symlinkat(__from: *const ::libc::c_char, __tofd: ::libc::c_int,
                     __to: *const ::libc::c_char) -> ::libc::c_int;
    pub fn readlinkat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                      __buf: *mut ::libc::c_char, __len: size_t) -> ssize_t;
    pub fn unlink(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn unlinkat(__fd: ::libc::c_int, __name: *const ::libc::c_char,
                    __flag: ::libc::c_int) -> ::libc::c_int;
    pub fn rmdir(__path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn tcgetpgrp(__fd: ::libc::c_int) -> __pid_t;
    pub fn tcsetpgrp(__fd: ::libc::c_int, __pgrp_id: __pid_t)
     -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_char;
    pub fn getlogin_r(__name: *mut ::libc::c_char, __name_len: size_t)
     -> ::libc::c_int;
    pub fn setlogin(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getopt(___argc: ::libc::c_int, ___argv: *const *mut ::libc::c_char,
                  __shortopts: *const ::libc::c_char) -> ::libc::c_int;
    pub fn gethostname(__name: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn sethostname(__name: *const ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn sethostid(__id: ::libc::c_long) -> ::libc::c_int;
    pub fn getdomainname(__name: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn setdomainname(__name: *const ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn vhangup() -> ::libc::c_int;
    pub fn revoke(__file: *const ::libc::c_char) -> ::libc::c_int;
    pub fn profil(__sample_buffer: *mut ::libc::c_ushort, __size: size_t,
                  __offset: size_t, __scale: ::libc::c_uint) -> ::libc::c_int;
    pub fn acct(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_char;
    pub fn endusershell() -> ();
    pub fn setusershell() -> ();
    pub fn daemon(__nochdir: ::libc::c_int, __noclose: ::libc::c_int)
     -> ::libc::c_int;
    pub fn chroot(__path: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getpass(__prompt: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn fsync(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn sync() -> ();
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn truncate(__file: *const ::libc::c_char, __length: __off_t)
     -> ::libc::c_int;
    pub fn ftruncate(__fd: ::libc::c_int, __length: __off_t) -> ::libc::c_int;
    pub fn brk(__addr: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sbrk(__delta: intptr_t) -> *mut ::libc::c_void;
    pub fn syscall(__sysno: ::libc::c_long, ...) -> ::libc::c_long;
    pub fn lockf(__fd: ::libc::c_int, __cmd: ::libc::c_int, __len: __off_t)
     -> ::libc::c_int;
    pub fn fdatasync(__fildes: ::libc::c_int) -> ::libc::c_int;
    pub fn closelog() -> ();
    pub fn openlog(__ident: *const ::libc::c_char, __option: ::libc::c_int,
                   __facility: ::libc::c_int) -> ();
    pub fn setlogmask(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn syslog(__pri: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ();
    pub fn vsyslog(__pri: ::libc::c_int, __fmt: *const ::libc::c_char,
                   __ap: __gnuc_va_list) -> ();
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sysv_signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn raise(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn ssignal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn gsignal(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn psignal(__sig: ::libc::c_int, __s: *const ::libc::c_char) -> ();
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::libc::c_char)
     -> ();
    pub fn __sigpause(__sig_or_mask: ::libc::c_int, __is_sig: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigblock(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn siggetmask() -> ::libc::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(__set: *const sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigprocmask(__how: ::libc::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::libc::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::libc::c_int;
    pub fn sigaction(__sig: ::libc::c_int, __act: *const Struct_sigaction,
                     __oact: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::libc::c_int;
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const Struct_timespec) -> ::libc::c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: ::libc::c_int, __val: Union_sigval)
     -> ::libc::c_int;
    pub fn sigvec(__sig: ::libc::c_int, __vec: *const Struct_sigvec,
                  __ovec: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::libc::c_int;
    pub fn siginterrupt(__sig: ::libc::c_int, __interrupt: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack, __oss: *mut Struct_sigstack)
     -> ::libc::c_int;
    pub fn sigaltstack(__ss: *const Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack) -> ::libc::c_int;
    pub fn pthread_sigmask(__how: ::libc::c_int, __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t) -> ::libc::c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __libc_current_sigrtmin() -> ::libc::c_int;
    pub fn __libc_current_sigrtmax() -> ::libc::c_int;
    pub fn wait(__stat_loc: __WAIT_STATUS) -> __pid_t;
    pub fn waitpid(__pid: __pid_t, __stat_loc: *mut ::libc::c_int,
                   __options: ::libc::c_int) -> __pid_t;
    pub fn waitid(__idtype: idtype_t, __id: __id_t, __infop: *mut siginfo_t,
                  __options: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(__stat_loc: __WAIT_STATUS, __options: ::libc::c_int,
                 __usage: *mut Struct_rusage) -> __pid_t;
    pub fn wait4(__pid: __pid_t, __stat_loc: __WAIT_STATUS,
                 __options: ::libc::c_int, __usage: *mut Struct_rusage)
     -> __pid_t;
    pub fn stat(__file: *const ::libc::c_char, __buf: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn fstat(__fd: ::libc::c_int, __buf: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn fstatat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                   __buf: *mut Struct_stat, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lstat(__file: *const ::libc::c_char, __buf: *mut Struct_stat)
     -> ::libc::c_int;
    pub fn chmod(__file: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn lchmod(__file: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn fchmod(__fd: ::libc::c_int, __mode: __mode_t) -> ::libc::c_int;
    pub fn fchmodat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                    __mode: __mode_t, __flag: ::libc::c_int) -> ::libc::c_int;
    pub fn umask(__mask: __mode_t) -> __mode_t;
    pub fn mkdir(__path: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn mkdirat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                   __mode: __mode_t) -> ::libc::c_int;
    pub fn mknod(__path: *const ::libc::c_char, __mode: __mode_t,
                 __dev: __dev_t) -> ::libc::c_int;
    pub fn mknodat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                   __mode: __mode_t, __dev: __dev_t) -> ::libc::c_int;
    pub fn mkfifo(__path: *const ::libc::c_char, __mode: __mode_t)
     -> ::libc::c_int;
    pub fn mkfifoat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                    __mode: __mode_t) -> ::libc::c_int;
    pub fn utimensat(__fd: ::libc::c_int, __path: *const ::libc::c_char,
                     __times: *mut Struct_timespec, __flags: ::libc::c_int)
     -> ::libc::c_int;
    pub fn futimens(__fd: ::libc::c_int, __times: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn __fxstat(__ver: ::libc::c_int, __fildes: ::libc::c_int,
                    __stat_buf: *mut Struct_stat) -> ::libc::c_int;
    pub fn __xstat(__ver: ::libc::c_int, __filename: *const ::libc::c_char,
                   __stat_buf: *mut Struct_stat) -> ::libc::c_int;
    pub fn __lxstat(__ver: ::libc::c_int, __filename: *const ::libc::c_char,
                    __stat_buf: *mut Struct_stat) -> ::libc::c_int;
    pub fn __fxstatat(__ver: ::libc::c_int, __fildes: ::libc::c_int,
                      __filename: *const ::libc::c_char,
                      __stat_buf: *mut Struct_stat, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __xmknod(__ver: ::libc::c_int, __path: *const ::libc::c_char,
                    __mode: __mode_t, __dev: *mut __dev_t) -> ::libc::c_int;
    pub fn __xmknodat(__ver: ::libc::c_int, __fd: ::libc::c_int,
                      __path: *const ::libc::c_char, __mode: __mode_t,
                      __dev: *mut __dev_t) -> ::libc::c_int;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_char,
                  __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_char,
                   __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_char,
                    __endptr: *mut *mut ::libc::c_char, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn a64l(__s: *const ::libc::c_char) -> ::libc::c_long;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_char,
                     __statelen: size_t) -> *mut ::libc::c_char;
    pub fn setstate(__statebuf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_char, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_char,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn(__status:
                                                               ::libc::c_int,
                                                           __arg:
                                                               *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn putenv(__string: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_char,
                  __value: *const ::libc::c_char, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(__template: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_char,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn system(__command: *const ::libc::c_char) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_char,
                    __resolved: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_char, __len: size_t) -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_char, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_char, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_char,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_char, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_char,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_char, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_char) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_char,
                     __tokens: *const *mut ::libc::c_char,
                     __valuep: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn opendir(__name: *const ::libc::c_char) -> *mut DIR;
    pub fn fdopendir(__fd: ::libc::c_int) -> *mut DIR;
    pub fn closedir(__dirp: *mut DIR) -> ::libc::c_int;
    pub fn readdir(__dirp: *mut DIR) -> *mut Struct_dirent;
    pub fn readdir_r(__dirp: *mut DIR, __entry: *mut Struct_dirent,
                     __result: *mut *mut Struct_dirent) -> ::libc::c_int;
    pub fn rewinddir(__dirp: *mut DIR) -> ();
    pub fn seekdir(__dirp: *mut DIR, __pos: ::libc::c_long) -> ();
    pub fn telldir(__dirp: *mut DIR) -> ::libc::c_long;
    pub fn dirfd(__dirp: *mut DIR) -> ::libc::c_int;
    pub fn scandir(__dir: *const ::libc::c_char,
                   __namelist: *mut *mut *mut Struct_dirent,
                   __selector:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *const Struct_dirent)
                                                 -> ::libc::c_int>,
                   __cmp:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut *const Struct_dirent,
                                                           arg2:
                                                               *mut *const Struct_dirent)
                                                 -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn alphasort(__e1: *mut *const Struct_dirent,
                     __e2: *mut *const Struct_dirent) -> ::libc::c_int;
    pub fn getdirentries(__fd: ::libc::c_int, __buf: *mut ::libc::c_char,
                         __nbytes: size_t, __basep: *mut __off_t)
     -> __ssize_t;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strncat(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn strcmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_char, __s2: *const ::libc::c_char,
                     __l: __locale_t) -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strndup(__string: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn strchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strrchr(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn strcspn(__s: *const ::libc::c_char,
                   __reject: *const ::libc::c_char) -> size_t;
    pub fn strspn(__s: *const ::libc::c_char, __accept: *const ::libc::c_char)
     -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_char,
                   __accept: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strstr(__haystack: *const ::libc::c_char,
                  __needle: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strtok(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __strtok_r(__s: *mut ::libc::c_char,
                      __delim: *const ::libc::c_char,
                      __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strtok_r(__s: *mut ::libc::c_char, __delim: *const ::libc::c_char,
                    __save_ptr: *mut *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn strlen(__s: *const ::libc::c_char) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_char, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_char,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_char;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn rindex(__s: *const ::libc::c_char, __c: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_char,
                      __s2: *const ::libc::c_char) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_char,
                       __s2: *const ::libc::c_char, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_char,
                  __delim: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn __stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn stpcpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn __stpncpy(__dest: *mut ::libc::c_char,
                     __src: *const ::libc::c_char, __n: size_t)
     -> *mut ::libc::c_char;
    pub fn stpncpy(__dest: *mut ::libc::c_char, __src: *const ::libc::c_char,
                   __n: size_t) -> *mut ::libc::c_char;
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t)
     -> ::libc::c_int;
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
    pub fn __sched_cpufree(__set: *mut cpu_set_t) -> ();
    pub fn sched_setparam(__pid: __pid_t, __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_getparam(__pid: __pid_t, __param: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::libc::c_int,
                              __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_getscheduler(__pid: __pid_t) -> ::libc::c_int;
    pub fn sched_yield() -> ::libc::c_int;
    pub fn sched_get_priority_max(__algorithm: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sched_get_priority_min(__algorithm: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_char, __maxsize: size_t,
                    __format: *const ::libc::c_char, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_char, __maxsize: size_t,
                      __format: *const ::libc::c_char, __tp: *const Struct_tm,
                      __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_char;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_char;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<extern "C" fn(arg1:
                                                                      *mut ::libc::c_void)
                                                        ->
                                                            *mut ::libc::c_void>,
                          __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pthread_exit(__retval: *mut ::libc::c_void) -> ();
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_detach(__th: pthread_t) -> ::libc::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::libc::c_int;
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut size_t)
     -> ::libc::c_int;
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: size_t) -> ::libc::c_int;
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut size_t)
     -> ::libc::c_int;
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: size_t) -> ::libc::c_int;
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr: *mut *mut ::libc::c_void,
                                 __stacksize: *mut size_t) -> ::libc::c_int;
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::libc::c_void,
                                 __stacksize: size_t) -> ::libc::c_int;
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::libc::c_int,
                                 __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::libc::c_int,
                                 __param: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn pthread_setcancelstate(__state: ::libc::c_int,
                                  __oldstate: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_setcanceltype(__type: ::libc::c_int,
                                 __oldtype: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_cancel(__th: pthread_t) -> ::libc::c_int;
    pub fn pthread_testcancel() -> ();
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t)
     -> ();
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t)
     -> ();
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> ();
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag,
                       __savemask: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::libc::c_int,
                                        __old_ceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::libc::c_int;
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::libc::c_int;
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::libc::c_uint) -> ::libc::c_int;
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::libc::c_int;
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut ::libc::c_void)
                                                            -> ()>)
     -> ::libc::c_int;
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::libc::c_int;
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::libc::c_void;
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::libc::c_int;
    pub fn pthread_atfork(__prepare:
                              ::std::option::Option<extern "C" fn() -> ()>,
                          __parent:
                              ::std::option::Option<extern "C" fn() -> ()>,
                          __child:
                              ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn getopt_long(___argc: ::libc::c_int,
                       ___argv: *const *mut ::libc::c_char,
                       __shortopts: *const ::libc::c_char,
                       __longopts: *const Struct_option,
                       __longind: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn getopt_long_only(___argc: ::libc::c_int,
                            ___argv: *const *mut ::libc::c_char,
                            __shortopts: *const ::libc::c_char,
                            __longopts: *const Struct_option,
                            __longind: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn setgrent() -> ();
    pub fn endgrent() -> ();
    pub fn getgrent() -> *mut Struct_group;
    pub fn fgetgrent(__stream: *mut FILE) -> *mut Struct_group;
    pub fn getgrgid(__gid: __gid_t) -> *mut Struct_group;
    pub fn getgrnam(__name: *const ::libc::c_char) -> *mut Struct_group;
    pub fn getgrgid_r(__gid: __gid_t, __resultbuf: *mut Struct_group,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn getgrnam_r(__name: *const ::libc::c_char,
                      __resultbuf: *mut Struct_group,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn fgetgrent_r(__stream: *mut FILE, __resultbuf: *mut Struct_group,
                       __buffer: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_group) -> ::libc::c_int;
    pub fn setgroups(__n: size_t, __groups: *const __gid_t) -> ::libc::c_int;
    pub fn getgrouplist(__user: *const ::libc::c_char, __group: __gid_t,
                        __groups: *mut __gid_t, __ngroups: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn initgroups(__user: *const ::libc::c_char, __group: __gid_t)
     -> ::libc::c_int;
    pub fn setpwent() -> ();
    pub fn endpwent() -> ();
    pub fn getpwent() -> *mut Struct_passwd;
    pub fn fgetpwent(__stream: *mut FILE) -> *mut Struct_passwd;
    pub fn putpwent(__p: *const Struct_passwd, __f: *mut FILE)
     -> ::libc::c_int;
    pub fn getpwuid(__uid: __uid_t) -> *mut Struct_passwd;
    pub fn getpwnam(__name: *const ::libc::c_char) -> *mut Struct_passwd;
    pub fn getpwent_r(__resultbuf: *mut Struct_passwd,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn getpwuid_r(__uid: __uid_t, __resultbuf: *mut Struct_passwd,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn getpwnam_r(__name: *const ::libc::c_char,
                      __resultbuf: *mut Struct_passwd,
                      __buffer: *mut ::libc::c_char, __buflen: size_t,
                      __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn fgetpwent_r(__stream: *mut FILE, __resultbuf: *mut Struct_passwd,
                       __buffer: *mut ::libc::c_char, __buflen: size_t,
                       __result: *mut *mut Struct_passwd) -> ::libc::c_int;
    pub fn fcntl(__fd: ::libc::c_int, __cmd: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn open(__file: *const ::libc::c_char, __oflag: ::libc::c_int, ...)
     -> ::libc::c_int;
    pub fn openat(__fd: ::libc::c_int, __file: *const ::libc::c_char,
                  __oflag: ::libc::c_int, ...) -> ::libc::c_int;
    pub fn creat(__file: *const ::libc::c_char, __mode: mode_t)
     -> ::libc::c_int;
    pub fn posix_fadvise(__fd: ::libc::c_int, __offset: off_t, __len: off_t,
                         __advise: ::libc::c_int) -> ::libc::c_int;
    pub fn posix_fallocate(__fd: ::libc::c_int, __offset: off_t, __len: off_t)
     -> ::libc::c_int;
    pub fn mmap(__addr: *mut ::libc::c_void, __len: size_t,
                __prot: ::libc::c_int, __flags: ::libc::c_int,
                __fd: ::libc::c_int, __offset: __off_t)
     -> *mut ::libc::c_void;
    pub fn munmap(__addr: *mut ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn mprotect(__addr: *mut ::libc::c_void, __len: size_t,
                    __prot: ::libc::c_int) -> ::libc::c_int;
    pub fn msync(__addr: *mut ::libc::c_void, __len: size_t,
                 __flags: ::libc::c_int) -> ::libc::c_int;
    pub fn madvise(__addr: *mut ::libc::c_void, __len: size_t,
                   __advice: ::libc::c_int) -> ::libc::c_int;
    pub fn posix_madvise(__addr: *mut ::libc::c_void, __len: size_t,
                         __advice: ::libc::c_int) -> ::libc::c_int;
    pub fn mlock(__addr: *const ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn munlock(__addr: *const ::libc::c_void, __len: size_t)
     -> ::libc::c_int;
    pub fn mlockall(__flags: ::libc::c_int) -> ::libc::c_int;
    pub fn munlockall() -> ::libc::c_int;
    pub fn mincore(__start: *mut ::libc::c_void, __len: size_t,
                   __vec: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn shm_open(__name: *const ::libc::c_char, __oflag: ::libc::c_int,
                    __mode: mode_t) -> ::libc::c_int;
    pub fn shm_unlink(__name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn do_log(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_object_config_data(arg1: *mut ::libc::c_char,
                                   arg2: ::libc::c_int, arg3: ::libc::c_int,
                                   arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn add_contact(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                       arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                       arg5: *mut *mut ::libc::c_char,
                       arg6: *mut ::libc::c_char, arg7: *mut ::libc::c_char,
                       arg8: ::libc::c_int, arg9: ::libc::c_int,
                       arg10: ::libc::c_int, arg11: ::libc::c_int,
                       arg12: ::libc::c_int, arg13: ::libc::c_int,
                       arg14: ::libc::c_int, arg15: ::libc::c_int,
                       arg16: ::libc::c_int, arg17: ::libc::c_int,
                       arg18: ::libc::c_int, arg19: ::libc::c_int,
                       arg20: ::libc::c_int, arg21: ::libc::c_int,
                       arg22: ::libc::c_int, arg23: ::libc::c_int)
     -> *mut contact;
    pub fn add_service_notification_command_to_contact(arg1: *mut contact,
                                                       arg2:
                                                           *mut ::libc::c_char)
     -> *mut commandsmember;
    pub fn add_host_notification_command_to_contact(arg1: *mut contact,
                                                    arg2: *mut ::libc::c_char)
     -> *mut commandsmember;
    pub fn add_custom_variable_to_contact(arg1: *mut contact,
                                          arg2: *mut ::libc::c_char,
                                          arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_host(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                    arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                    arg5: *mut ::libc::c_char, arg6: ::libc::c_int,
                    arg7: ::libc::c_double, arg8: ::libc::c_double,
                    arg9: ::libc::c_int, arg10: ::libc::c_int,
                    arg11: ::libc::c_int, arg12: ::libc::c_int,
                    arg13: ::libc::c_int, arg14: ::libc::c_int,
                    arg15: ::libc::c_double, arg16: ::libc::c_double,
                    arg17: *mut ::libc::c_char, arg18: ::libc::c_int,
                    arg19: *mut ::libc::c_char, arg20: ::libc::c_int,
                    arg21: ::libc::c_int, arg22: *mut ::libc::c_char,
                    arg23: ::libc::c_int, arg24: ::libc::c_int,
                    arg25: ::libc::c_double, arg26: ::libc::c_double,
                    arg27: ::libc::c_int, arg28: ::libc::c_int,
                    arg29: ::libc::c_int, arg30: ::libc::c_int,
                    arg31: ::libc::c_int, arg32: ::libc::c_int,
                    arg33: ::libc::c_int, arg34: ::libc::c_int,
                    arg35: *mut ::libc::c_char, arg36: ::libc::c_int,
                    arg37: ::libc::c_int, arg38: *mut ::libc::c_char,
                    arg39: *mut ::libc::c_char, arg40: *mut ::libc::c_char,
                    arg41: *mut ::libc::c_char, arg42: *mut ::libc::c_char,
                    arg43: *mut ::libc::c_char, arg44: *mut ::libc::c_char,
                    arg45: ::libc::c_int, arg46: ::libc::c_int,
                    arg47: ::libc::c_int, arg48: ::libc::c_double,
                    arg49: ::libc::c_double, arg50: ::libc::c_double,
                    arg51: ::libc::c_int, arg52: ::libc::c_int,
                    arg53: ::libc::c_int, arg54: ::libc::c_int,
                    arg55: ::libc::c_int) -> *mut host;
    pub fn add_parent_host_to_host(arg1: *mut host, arg2: *mut ::libc::c_char)
     -> *mut hostsmember;
    pub fn add_child_link_to_host(arg1: *mut host, arg2: *mut host)
     -> *mut hostsmember;
    pub fn add_contactgroup_to_host(arg1: *mut host,
                                    arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_host(arg1: *mut host, arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_custom_variable_to_host(arg1: *mut host,
                                       arg2: *mut ::libc::c_char,
                                       arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_timeperiod(arg1: *mut ::libc::c_char,
                          arg2: *mut ::libc::c_char) -> *mut timeperiod;
    pub fn add_exclusion_to_timeperiod(arg1: *mut timeperiod,
                                       arg2: *mut ::libc::c_char)
     -> *mut timeperiodexclusion;
    pub fn add_timerange_to_timeperiod(arg1: *mut timeperiod,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_ulong,
                                       arg4: ::libc::c_ulong)
     -> *mut timerange;
    pub fn add_exception_to_timeperiod(arg1: *mut timeperiod,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_int,
                                       arg4: ::libc::c_int,
                                       arg5: ::libc::c_int,
                                       arg6: ::libc::c_int,
                                       arg7: ::libc::c_int,
                                       arg8: ::libc::c_int,
                                       arg9: ::libc::c_int,
                                       arg10: ::libc::c_int,
                                       arg11: ::libc::c_int,
                                       arg12: ::libc::c_int,
                                       arg13: ::libc::c_int)
     -> *mut daterange;
    pub fn add_timerange_to_daterange(arg1: *mut daterange,
                                      arg2: ::libc::c_ulong,
                                      arg3: ::libc::c_ulong)
     -> *mut timerange;
    pub fn add_hostgroup(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                         arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                         arg5: *mut ::libc::c_char) -> *mut hostgroup;
    pub fn add_host_to_hostgroup(arg1: *mut hostgroup,
                                 arg2: *mut ::libc::c_char)
     -> *mut hostsmember;
    pub fn add_servicegroup(arg1: *mut ::libc::c_char,
                            arg2: *mut ::libc::c_char,
                            arg3: *mut ::libc::c_char,
                            arg4: *mut ::libc::c_char,
                            arg5: *mut ::libc::c_char) -> *mut servicegroup;
    pub fn add_service_to_servicegroup(arg1: *mut servicegroup,
                                       arg2: *mut ::libc::c_char,
                                       arg3: *mut ::libc::c_char)
     -> *mut servicesmember;
    pub fn add_contactgroup(arg1: *mut ::libc::c_char,
                            arg2: *mut ::libc::c_char) -> *mut contactgroup;
    pub fn add_contact_to_contactgroup(arg1: *mut contactgroup,
                                       arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_command(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut command;
    pub fn add_service(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char,
                       arg3: *mut ::libc::c_char, arg4: *mut ::libc::c_char,
                       arg5: ::libc::c_int, arg6: ::libc::c_int,
                       arg7: ::libc::c_int, arg8: ::libc::c_int,
                       arg9: ::libc::c_double, arg10: ::libc::c_double,
                       arg11: ::libc::c_double, arg12: ::libc::c_double,
                       arg13: *mut ::libc::c_char, arg14: ::libc::c_int,
                       arg15: ::libc::c_int, arg16: ::libc::c_int,
                       arg17: ::libc::c_int, arg18: ::libc::c_int,
                       arg19: ::libc::c_int, arg20: ::libc::c_int,
                       arg21: ::libc::c_int, arg22: *mut ::libc::c_char,
                       arg23: ::libc::c_int, arg24: *mut ::libc::c_char,
                       arg25: ::libc::c_int, arg26: ::libc::c_int,
                       arg27: ::libc::c_double, arg28: ::libc::c_double,
                       arg29: ::libc::c_int, arg30: ::libc::c_int,
                       arg31: ::libc::c_int, arg32: ::libc::c_int,
                       arg33: ::libc::c_int, arg34: ::libc::c_int,
                       arg35: ::libc::c_int, arg36: ::libc::c_int,
                       arg37: ::libc::c_int, arg38: ::libc::c_int,
                       arg39: *mut ::libc::c_char, arg40: ::libc::c_int,
                       arg41: ::libc::c_int, arg42: *mut ::libc::c_char,
                       arg43: *mut ::libc::c_char, arg44: *mut ::libc::c_char,
                       arg45: *mut ::libc::c_char, arg46: *mut ::libc::c_char,
                       arg47: ::libc::c_int, arg48: ::libc::c_int,
                       arg49: ::libc::c_int) -> *mut service;
    pub fn add_contactgroup_to_service(arg1: *mut service,
                                       arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_service(arg1: *mut service,
                                  arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_serviceescalation(arg1: *mut ::libc::c_char,
                                 arg2: *mut ::libc::c_char,
                                 arg3: ::libc::c_int, arg4: ::libc::c_int,
                                 arg5: ::libc::c_double,
                                 arg6: *mut ::libc::c_char,
                                 arg7: ::libc::c_int, arg8: ::libc::c_int,
                                 arg9: ::libc::c_int, arg10: ::libc::c_int)
     -> *mut serviceescalation;
    pub fn add_contactgroup_to_serviceescalation(arg1: *mut serviceescalation,
                                                 arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_serviceescalation(arg1: *mut serviceescalation,
                                            arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_custom_variable_to_service(arg1: *mut service,
                                          arg2: *mut ::libc::c_char,
                                          arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_service_dependency(arg1: *mut ::libc::c_char,
                                  arg2: *mut ::libc::c_char,
                                  arg3: *mut ::libc::c_char,
                                  arg4: *mut ::libc::c_char,
                                  arg5: ::libc::c_int, arg6: ::libc::c_int,
                                  arg7: ::libc::c_int, arg8: ::libc::c_int,
                                  arg9: ::libc::c_int, arg10: ::libc::c_int,
                                  arg11: ::libc::c_int,
                                  arg12: *mut ::libc::c_char)
     -> *mut servicedependency;
    pub fn add_host_dependency(arg1: *mut ::libc::c_char,
                               arg2: *mut ::libc::c_char, arg3: ::libc::c_int,
                               arg4: ::libc::c_int, arg5: ::libc::c_int,
                               arg6: ::libc::c_int, arg7: ::libc::c_int,
                               arg8: ::libc::c_int, arg9: *mut ::libc::c_char)
     -> *mut hostdependency;
    pub fn add_hostescalation(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                              arg3: ::libc::c_int, arg4: ::libc::c_double,
                              arg5: *mut ::libc::c_char, arg6: ::libc::c_int,
                              arg7: ::libc::c_int, arg8: ::libc::c_int)
     -> *mut hostescalation;
    pub fn add_contact_to_hostescalation(arg1: *mut hostescalation,
                                         arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_contactgroup_to_hostescalation(arg1: *mut hostescalation,
                                              arg2: *mut ::libc::c_char)
     -> *mut contactgroupsmember;
    pub fn add_contact_to_object(arg1: *mut *mut contactsmember,
                                 arg2: *mut ::libc::c_char)
     -> *mut contactsmember;
    pub fn add_custom_variable_to_object(arg1:
                                             *mut *mut customvariablesmember,
                                         arg2: *mut ::libc::c_char,
                                         arg3: *mut ::libc::c_char)
     -> *mut customvariablesmember;
    pub fn add_service_link_to_host(arg1: *mut host, arg2: *mut service)
     -> *mut servicesmember;
    pub fn init_object_skiplists() -> ::libc::c_int;
    pub fn free_object_skiplists() -> ::libc::c_int;
    pub fn skiplist_compare_text(val1a: *const ::libc::c_char,
                                 val1b: *const ::libc::c_char,
                                 val2a: *const ::libc::c_char,
                                 val2b: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn skiplist_compare_host(a: *mut ::libc::c_void,
                                 b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_service(a: *mut ::libc::c_void,
                                    b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_command(a: *mut ::libc::c_void,
                                    b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_timeperiod(a: *mut ::libc::c_void,
                                       b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_contact(a: *mut ::libc::c_void,
                                    b: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn skiplist_compare_contactgroup(a: *mut ::libc::c_void,
                                         b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_hostgroup(a: *mut ::libc::c_void,
                                      b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_servicegroup(a: *mut ::libc::c_void,
                                         b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_hostescalation(a: *mut ::libc::c_void,
                                           b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_serviceescalation(a: *mut ::libc::c_void,
                                              b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_hostdependency(a: *mut ::libc::c_void,
                                           b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn skiplist_compare_servicedependency(a: *mut ::libc::c_void,
                                              b: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn get_host_count() -> ::libc::c_int;
    pub fn get_service_count() -> ::libc::c_int;
    pub fn add_servicedependency_to_hashlist(arg1: *mut servicedependency)
     -> ::libc::c_int;
    pub fn find_timeperiod(arg1: *mut ::libc::c_char) -> *mut timeperiod;
    pub fn find_host(arg1: *mut ::libc::c_char) -> *mut host;
    pub fn find_hostgroup(arg1: *mut ::libc::c_char) -> *mut hostgroup;
    pub fn find_servicegroup(arg1: *mut ::libc::c_char) -> *mut servicegroup;
    pub fn find_contact(arg1: *mut ::libc::c_char) -> *mut contact;
    pub fn find_contactgroup(arg1: *mut ::libc::c_char) -> *mut contactgroup;
    pub fn find_command(arg1: *mut ::libc::c_char) -> *mut command;
    pub fn find_service(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut service;
    pub fn get_first_hostescalation_by_host(arg1: *mut ::libc::c_char,
                                            arg2: *mut *mut ::libc::c_void)
     -> *mut hostescalation;
    pub fn get_next_hostescalation_by_host(arg1: *mut ::libc::c_char,
                                           arg2: *mut *mut ::libc::c_void)
     -> *mut hostescalation;
    pub fn get_first_serviceescalation_by_service(arg1: *mut ::libc::c_char,
                                                  arg2: *mut ::libc::c_char,
                                                  arg3:
                                                      *mut *mut ::libc::c_void)
     -> *mut serviceescalation;
    pub fn get_next_serviceescalation_by_service(arg1: *mut ::libc::c_char,
                                                 arg2: *mut ::libc::c_char,
                                                 arg3:
                                                     *mut *mut ::libc::c_void)
     -> *mut serviceescalation;
    pub fn get_first_hostdependency_by_dependent_host(arg1:
                                                          *mut ::libc::c_char,
                                                      arg2:
                                                          *mut *mut ::libc::c_void)
     -> *mut hostdependency;
    pub fn get_next_hostdependency_by_dependent_host(arg1:
                                                         *mut ::libc::c_char,
                                                     arg2:
                                                         *mut *mut ::libc::c_void)
     -> *mut hostdependency;
    pub fn get_first_servicedependency_by_dependent_service(arg1:
                                                                *mut ::libc::c_char,
                                                            arg2:
                                                                *mut ::libc::c_char,
                                                            arg3:
                                                                *mut *mut ::libc::c_void)
     -> *mut servicedependency;
    pub fn get_next_servicedependency_by_dependent_service(arg1:
                                                               *mut ::libc::c_char,
                                                           arg2:
                                                               *mut ::libc::c_char,
                                                           arg3:
                                                               *mut *mut ::libc::c_void)
     -> *mut servicedependency;
    pub fn is_host_immediate_child_of_host(arg1: *mut host, arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_primary_immediate_child_of_host(arg1: *mut host,
                                                   arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_immediate_parent_of_host(arg1: *mut host, arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_member_of_hostgroup(arg1: *mut hostgroup, arg2: *mut host)
     -> ::libc::c_int;
    pub fn is_host_member_of_servicegroup(arg1: *mut servicegroup,
                                          arg2: *mut host) -> ::libc::c_int;
    pub fn is_service_member_of_servicegroup(arg1: *mut servicegroup,
                                             arg2: *mut service)
     -> ::libc::c_int;
    pub fn is_contact_member_of_contactgroup(arg1: *mut contactgroup,
                                             arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_contact_for_hostgroup(arg1: *mut hostgroup, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_contact_for_servicegroup(arg1: *mut servicegroup,
                                       arg2: *mut contact) -> ::libc::c_int;
    pub fn is_contact_for_host(arg1: *mut host, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_escalated_contact_for_host(arg1: *mut host, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_contact_for_service(arg1: *mut service, arg2: *mut contact)
     -> ::libc::c_int;
    pub fn is_escalated_contact_for_service(arg1: *mut service,
                                            arg2: *mut contact)
     -> ::libc::c_int;
    pub fn number_of_immediate_child_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn number_of_total_child_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn number_of_immediate_parent_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn number_of_total_parent_hosts(arg1: *mut host) -> ::libc::c_int;
    pub fn free_object_data() -> ::libc::c_int;
    pub fn read_main_config_file(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_resource_file(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn read_all_object_data(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn pre_flight_check() -> ::libc::c_int;
    pub fn pre_flight_object_check(arg1: *mut ::libc::c_int,
                                   arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn pre_flight_circular_check(arg1: *mut ::libc::c_int,
                                     arg2: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn init_timing_loop() -> ();
    pub fn setup_sighandler() -> ();
    pub fn reset_sighandler() -> ();
    pub fn daemon_init() -> ::libc::c_int;
    pub fn drop_privileges(arg1: *mut ::libc::c_char,
                           arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn display_scheduling_info() -> ();
    pub fn schedule_new_event(arg1: ::libc::c_int, arg2: ::libc::c_int,
                              arg3: time_t, arg4: ::libc::c_int,
                              arg5: ::libc::c_ulong,
                              arg6: *mut ::libc::c_void, arg7: ::libc::c_int,
                              arg8: *mut ::libc::c_void,
                              arg9: *mut ::libc::c_void, arg10: ::libc::c_int)
     -> ::libc::c_int;
    pub fn reschedule_event(arg1: *mut timed_event,
                            arg2: *mut *mut timed_event,
                            arg3: *mut *mut timed_event) -> ();
    pub fn add_event(arg1: *mut timed_event, arg2: *mut *mut timed_event,
                     arg3: *mut *mut timed_event) -> ();
    pub fn remove_event(arg1: *mut timed_event, arg2: *mut *mut timed_event,
                        arg3: *mut *mut timed_event) -> ();
    pub fn event_execution_loop() -> ::libc::c_int;
    pub fn handle_timed_event(arg1: *mut timed_event) -> ::libc::c_int;
    pub fn adjust_check_scheduling() -> ();
    pub fn compensate_for_system_time_change(arg1: ::libc::c_ulong,
                                             arg2: ::libc::c_ulong) -> ();
    pub fn adjust_timestamp_for_time_change(arg1: time_t, arg2: time_t,
                                            arg3: ::libc::c_ulong,
                                            arg4: *mut time_t) -> ();
    pub fn resort_event_list(arg1: *mut *mut timed_event,
                             arg2: *mut *mut timed_event) -> ();
    pub fn move_check_result_to_queue(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_check_result_queue(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_check_result_file(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn add_check_result_to_list(arg1: *mut check_result) -> ::libc::c_int;
    pub fn read_check_result() -> *mut check_result;
    pub fn delete_check_result_file(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn free_check_result_list() -> ::libc::c_int;
    pub fn init_check_result(arg1: *mut check_result) -> ::libc::c_int;
    pub fn free_check_result(arg1: *mut check_result) -> ::libc::c_int;
    pub fn parse_check_output(arg1: *mut ::libc::c_char,
                              arg2: *mut *mut ::libc::c_char,
                              arg3: *mut *mut ::libc::c_char,
                              arg4: *mut *mut ::libc::c_char,
                              arg5: ::libc::c_int, arg6: ::libc::c_int)
     -> ::libc::c_int;
    pub fn open_command_file() -> ::libc::c_int;
    pub fn close_command_file() -> ::libc::c_int;
    pub fn check_service_dependencies(arg1: *mut service, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_host_dependencies(arg1: *mut host, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_for_orphaned_services() -> ();
    pub fn check_for_orphaned_hosts() -> ();
    pub fn check_service_result_freshness() -> ();
    pub fn is_service_result_fresh(arg1: *mut service, arg2: time_t,
                                   arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn check_host_result_freshness() -> ();
    pub fn is_host_result_fresh(arg1: *mut host, arg2: time_t,
                                arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn my_system(arg1: *mut ::libc::c_char, arg2: ::libc::c_int,
                     arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_double,
                     arg5: *mut *mut ::libc::c_char, arg6: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_for_service_flapping(arg1: *mut service, arg2: ::libc::c_int,
                                      arg3: ::libc::c_int) -> ();
    pub fn check_for_host_flapping(arg1: *mut host, arg2: ::libc::c_int,
                                   arg3: ::libc::c_int, arg4: ::libc::c_int)
     -> ();
    pub fn set_service_flap(arg1: *mut service, arg2: ::libc::c_double,
                            arg3: ::libc::c_double, arg4: ::libc::c_double,
                            arg5: ::libc::c_int) -> ();
    pub fn clear_service_flap(arg1: *mut service, arg2: ::libc::c_double,
                              arg3: ::libc::c_double, arg4: ::libc::c_double)
     -> ();
    pub fn set_host_flap(arg1: *mut host, arg2: ::libc::c_double,
                         arg3: ::libc::c_double, arg4: ::libc::c_double,
                         arg5: ::libc::c_int) -> ();
    pub fn clear_host_flap(arg1: *mut host, arg2: ::libc::c_double,
                           arg3: ::libc::c_double, arg4: ::libc::c_double)
     -> ();
    pub fn enable_flap_detection_routines() -> ();
    pub fn disable_flap_detection_routines() -> ();
    pub fn enable_host_flap_detection(arg1: *mut host) -> ();
    pub fn disable_host_flap_detection(arg1: *mut host) -> ();
    pub fn enable_service_flap_detection(arg1: *mut service) -> ();
    pub fn disable_service_flap_detection(arg1: *mut service) -> ();
    pub fn handle_host_flap_detection_disabled(arg1: *mut host) -> ();
    pub fn handle_service_flap_detection_disabled(arg1: *mut service) -> ();
    pub fn perform_on_demand_host_check(arg1: *mut host,
                                        arg2: *mut ::libc::c_int,
                                        arg3: ::libc::c_int,
                                        arg4: ::libc::c_int,
                                        arg5: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn perform_scheduled_host_check(arg1: *mut host, arg2: ::libc::c_int,
                                        arg3: ::libc::c_double)
     -> ::libc::c_int;
    pub fn check_host_check_viability_3x(arg1: *mut host, arg2: ::libc::c_int,
                                         arg3: *mut ::libc::c_int,
                                         arg4: *mut time_t) -> ::libc::c_int;
    pub fn adjust_host_check_attempt_3x(arg1: *mut host, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn determine_host_reachability(arg1: *mut host) -> ::libc::c_int;
    pub fn process_host_check_result_3x(arg1: *mut host, arg2: ::libc::c_int,
                                        arg3: *mut ::libc::c_char,
                                        arg4: ::libc::c_int,
                                        arg5: ::libc::c_int,
                                        arg6: ::libc::c_int,
                                        arg7: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn perform_on_demand_host_check_3x(arg1: *mut host,
                                           arg2: *mut ::libc::c_int,
                                           arg3: ::libc::c_int,
                                           arg4: ::libc::c_int,
                                           arg5: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn run_sync_host_check_3x(arg1: *mut host, arg2: *mut ::libc::c_int,
                                  arg3: ::libc::c_int, arg4: ::libc::c_int,
                                  arg5: ::libc::c_ulong) -> ::libc::c_int;
    pub fn execute_sync_host_check_3x(arg1: *mut host) -> ::libc::c_int;
    pub fn run_scheduled_host_check_3x(arg1: *mut host, arg2: ::libc::c_int,
                                       arg3: ::libc::c_double)
     -> ::libc::c_int;
    pub fn run_async_host_check_3x(arg1: *mut host, arg2: ::libc::c_int,
                                   arg3: ::libc::c_double,
                                   arg4: ::libc::c_int, arg5: ::libc::c_int,
                                   arg6: *mut ::libc::c_int,
                                   arg7: *mut time_t) -> ::libc::c_int;
    pub fn handle_async_host_check_result_3x(arg1: *mut host,
                                             arg2: *mut check_result)
     -> ::libc::c_int;
    pub fn check_service_check_viability(arg1: *mut service,
                                         arg2: ::libc::c_int,
                                         arg3: *mut ::libc::c_int,
                                         arg4: *mut time_t) -> ::libc::c_int;
    pub fn run_scheduled_service_check(arg1: *mut service,
                                       arg2: ::libc::c_int,
                                       arg3: ::libc::c_double)
     -> ::libc::c_int;
    pub fn run_async_service_check(arg1: *mut service, arg2: ::libc::c_int,
                                   arg3: ::libc::c_double,
                                   arg4: ::libc::c_int, arg5: ::libc::c_int,
                                   arg6: *mut ::libc::c_int,
                                   arg7: *mut time_t) -> ::libc::c_int;
    pub fn handle_async_service_check_result(arg1: *mut service,
                                             arg2: *mut check_result)
     -> ::libc::c_int;
    pub fn handle_host_state(arg1: *mut host) -> ::libc::c_int;
    pub fn reap_check_results() -> ::libc::c_int;
    pub fn init_check_stats() -> ::libc::c_int;
    pub fn update_check_stats(arg1: ::libc::c_int, arg2: time_t)
     -> ::libc::c_int;
    pub fn generate_check_stats() -> ::libc::c_int;
    pub fn obsessive_compulsive_service_check_processor(arg1: *mut service)
     -> ::libc::c_int;
    pub fn obsessive_compulsive_host_check_processor(arg1: *mut host)
     -> ::libc::c_int;
    pub fn handle_service_event(arg1: *mut service) -> ::libc::c_int;
    pub fn run_service_event_handler(arg1: *mut service) -> ::libc::c_int;
    pub fn run_global_service_event_handler(arg1: *mut service)
     -> ::libc::c_int;
    pub fn handle_host_event(arg1: *mut host) -> ::libc::c_int;
    pub fn run_host_event_handler(arg1: *mut host) -> ::libc::c_int;
    pub fn run_global_host_event_handler(arg1: *mut host) -> ::libc::c_int;
    pub fn check_service_notification_viability(arg1: *mut service,
                                                arg2: ::libc::c_int,
                                                arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn is_valid_escalation_for_service_notification(arg1: *mut service,
                                                        arg2:
                                                            *mut serviceescalation,
                                                        arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn should_service_notification_be_escalated(arg1: *mut service)
     -> ::libc::c_int;
    pub fn service_notification(arg1: *mut service, arg2: ::libc::c_int,
                                arg3: *mut ::libc::c_char,
                                arg4: *mut ::libc::c_char,
                                arg5: ::libc::c_int) -> ::libc::c_int;
    pub fn check_contact_service_notification_viability(arg1: *mut contact,
                                                        arg2: *mut service,
                                                        arg3: ::libc::c_int,
                                                        arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn notify_contact_of_service(arg1: *mut contact, arg2: *mut service,
                                     arg3: ::libc::c_int,
                                     arg4: *mut ::libc::c_char,
                                     arg5: *mut ::libc::c_char,
                                     arg6: ::libc::c_int, arg7: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_host_notification_viability(arg1: *mut host,
                                             arg2: ::libc::c_int,
                                             arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn is_valid_escalation_for_host_notification(arg1: *mut host,
                                                     arg2:
                                                         *mut hostescalation,
                                                     arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn should_host_notification_be_escalated(arg1: *mut host)
     -> ::libc::c_int;
    pub fn host_notification(arg1: *mut host, arg2: ::libc::c_int,
                             arg3: *mut ::libc::c_char,
                             arg4: *mut ::libc::c_char, arg5: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_contact_host_notification_viability(arg1: *mut contact,
                                                     arg2: *mut host,
                                                     arg3: ::libc::c_int,
                                                     arg4: ::libc::c_int)
     -> ::libc::c_int;
    pub fn notify_contact_of_host(arg1: *mut contact, arg2: *mut host,
                                  arg3: ::libc::c_int,
                                  arg4: *mut ::libc::c_char,
                                  arg5: *mut ::libc::c_char,
                                  arg6: ::libc::c_int, arg7: ::libc::c_int)
     -> ::libc::c_int;
    pub fn create_notification_list_from_host(arg1: *mut host,
                                              arg2: ::libc::c_int,
                                              arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn create_notification_list_from_service(arg1: *mut service,
                                                 arg2: ::libc::c_int,
                                                 arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn add_notification(arg1: *mut contact) -> ::libc::c_int;
    pub fn find_notification(arg1: *mut contact) -> *mut notification;
    pub fn get_next_host_notification_time(arg1: *mut host, arg2: time_t)
     -> time_t;
    pub fn get_next_service_notification_time(arg1: *mut service,
                                              arg2: time_t) -> time_t;
    pub fn logit(arg1: ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *const ::libc::c_char, ...) -> ();
    pub fn write_to_logs_and_console(arg1: *mut ::libc::c_char,
                                     arg2: ::libc::c_ulong,
                                     arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn write_to_console(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn write_to_all_logs(arg1: *mut ::libc::c_char, arg2: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn write_to_all_logs_with_timestamp(arg1: *mut ::libc::c_char,
                                            arg2: ::libc::c_ulong,
                                            arg3: *mut time_t)
     -> ::libc::c_int;
    pub fn write_to_log(arg1: *mut ::libc::c_char, arg2: ::libc::c_ulong,
                        arg3: *mut time_t) -> ::libc::c_int;
    pub fn write_to_syslog(arg1: *mut ::libc::c_char, arg2: ::libc::c_ulong)
     -> ::libc::c_int;
    pub fn log_service_event(arg1: *mut service) -> ::libc::c_int;
    pub fn log_host_event(arg1: *mut host) -> ::libc::c_int;
    pub fn log_host_states(arg1: ::libc::c_int, arg2: *mut time_t)
     -> ::libc::c_int;
    pub fn log_service_states(arg1: ::libc::c_int, arg2: *mut time_t)
     -> ::libc::c_int;
    pub fn rotate_log_file(arg1: time_t) -> ::libc::c_int;
    pub fn write_log_file_info(arg1: *mut time_t) -> ::libc::c_int;
    pub fn open_debug_log() -> ::libc::c_int;
    pub fn log_debug_info(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn close_debug_log() -> ::libc::c_int;
    pub fn cleanup() -> ();
    pub fn free_memory() -> ();
    pub fn reset_variables() -> ::libc::c_int;
    pub fn free_notification_list() -> ();
    pub fn hashfunc(name1: *const ::libc::c_char,
                    name2: *const ::libc::c_char, hashslots: ::libc::c_int)
     -> ::libc::c_int;
    pub fn compare_hashdata(arg1: *const ::libc::c_char,
                            arg2: *const ::libc::c_char,
                            arg3: *const ::libc::c_char,
                            arg4: *const ::libc::c_char) -> ::libc::c_int;
    pub fn sighandler(arg1: ::libc::c_int) -> ();
    pub fn service_check_sighandler(arg1: ::libc::c_int) -> ();
    pub fn host_check_sighandler(arg1: ::libc::c_int) -> ();
    pub fn my_system_sighandler(arg1: ::libc::c_int) -> ();
    pub fn file_lock_sighandler(arg1: ::libc::c_int) -> ();
    pub fn strip(arg1: *mut ::libc::c_char) -> ();
    pub fn my_strtok(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn my_strsep(arg1: *mut *mut ::libc::c_char,
                     arg2: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn compare_strings(arg1: *mut ::libc::c_char,
                           arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn escape_newlines(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn contains_illegal_object_chars(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn my_rename(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn my_fcopy(arg1: *mut ::libc::c_char, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn get_raw_command_line(arg1: *mut command, arg2: *mut ::libc::c_char,
                                arg3: *mut *mut ::libc::c_char,
                                arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn check_time_against_period(arg1: time_t, arg2: *mut timeperiod)
     -> ::libc::c_int;
    pub fn is_daterange_single_day(arg1: *mut daterange) -> ::libc::c_int;
    pub fn calculate_time_from_weekday_of_month(arg1: ::libc::c_int,
                                                arg2: ::libc::c_int,
                                                arg3: ::libc::c_int,
                                                arg4: ::libc::c_int)
     -> time_t;
    pub fn calculate_time_from_day_of_month(arg1: ::libc::c_int,
                                            arg2: ::libc::c_int,
                                            arg3: ::libc::c_int) -> time_t;
    pub fn get_next_valid_time(arg1: time_t, arg2: *mut time_t,
                               arg3: *mut timeperiod) -> ();
    pub fn get_datetime_string(arg1: *mut time_t, arg2: *mut ::libc::c_char,
                               arg3: ::libc::c_int, arg4: ::libc::c_int)
     -> ();
    pub fn get_time_breakdown(arg1: ::libc::c_ulong, arg2: *mut ::libc::c_int,
                              arg3: *mut ::libc::c_int,
                              arg4: *mut ::libc::c_int,
                              arg5: *mut ::libc::c_int) -> ();
    pub fn get_next_log_rotation_time() -> time_t;
    pub fn init_embedded_perl(arg1: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn deinit_embedded_perl() -> ::libc::c_int;
    pub fn file_uses_embedded_perl(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn dbuf_init(arg1: *mut dbuf, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn dbuf_free(arg1: *mut dbuf) -> ::libc::c_int;
    pub fn dbuf_strcat(arg1: *mut dbuf, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn set_environment_var(arg1: *mut ::libc::c_char,
                               arg2: *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn check_for_external_commands() -> ::libc::c_int;
    pub fn process_external_command1(arg1: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_external_command2(arg1: ::libc::c_int, arg2: time_t,
                                     arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_external_commands_from_file(arg1: *mut ::libc::c_char,
                                               arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn process_host_command(arg1: ::libc::c_int, arg2: time_t,
                                arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn process_hostgroup_command(arg1: ::libc::c_int, arg2: time_t,
                                     arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_service_command(arg1: ::libc::c_int, arg2: time_t,
                                   arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_servicegroup_command(arg1: ::libc::c_int, arg2: time_t,
                                        arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_contact_command(arg1: ::libc::c_int, arg2: time_t,
                                   arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_contactgroup_command(arg1: ::libc::c_int, arg2: time_t,
                                        arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_add_comment(arg1: ::libc::c_int, arg2: time_t,
                           arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cmd_delete_comment(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_delete_all_comments(arg1: ::libc::c_int,
                                   arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_delay_notification(arg1: ::libc::c_int,
                                  arg2: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cmd_schedule_service_check(arg1: ::libc::c_int,
                                      arg2: *mut ::libc::c_char,
                                      arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn cmd_schedule_check(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_schedule_host_service_checks(arg1: ::libc::c_int,
                                            arg2: *mut ::libc::c_char,
                                            arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn cmd_signal_process(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_process_service_check_result(arg1: ::libc::c_int, arg2: time_t,
                                            arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_process_host_check_result(arg1: ::libc::c_int, arg2: time_t,
                                         arg3: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_acknowledge_problem(arg1: ::libc::c_int,
                                   arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_remove_acknowledgement(arg1: ::libc::c_int,
                                      arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_schedule_downtime(arg1: ::libc::c_int, arg2: time_t,
                                 arg3: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cmd_delete_downtime(arg1: ::libc::c_int, arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_change_object_int_var(arg1: ::libc::c_int,
                                     arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_change_object_char_var(arg1: ::libc::c_int,
                                      arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_change_object_custom_var(arg1: ::libc::c_int,
                                        arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn cmd_process_external_commands_from_file(arg1: ::libc::c_int,
                                                   arg2: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_passive_service_check(arg1: time_t,
                                         arg2: *mut ::libc::c_char,
                                         arg3: *mut ::libc::c_char,
                                         arg4: ::libc::c_int,
                                         arg5: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn process_passive_host_check(arg1: time_t, arg2: *mut ::libc::c_char,
                                      arg3: ::libc::c_int,
                                      arg4: *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn disable_service_checks(arg1: *mut service) -> ();
    pub fn enable_service_checks(arg1: *mut service) -> ();
    pub fn schedule_service_check(arg1: *mut service, arg2: time_t,
                                  arg3: ::libc::c_int) -> ();
    pub fn schedule_host_check(arg1: *mut host, arg2: time_t,
                               arg3: ::libc::c_int) -> ();
    pub fn enable_all_notifications() -> ();
    pub fn disable_all_notifications() -> ();
    pub fn enable_service_notifications(arg1: *mut service) -> ();
    pub fn disable_service_notifications(arg1: *mut service) -> ();
    pub fn enable_host_notifications(arg1: *mut host) -> ();
    pub fn disable_host_notifications(arg1: *mut host) -> ();
    pub fn enable_and_propagate_notifications(arg1: *mut host,
                                              arg2: ::libc::c_int,
                                              arg3: ::libc::c_int,
                                              arg4: ::libc::c_int,
                                              arg5: ::libc::c_int) -> ();
    pub fn disable_and_propagate_notifications(arg1: *mut host,
                                               arg2: ::libc::c_int,
                                               arg3: ::libc::c_int,
                                               arg4: ::libc::c_int,
                                               arg5: ::libc::c_int) -> ();
    pub fn schedule_and_propagate_downtime(arg1: *mut host, arg2: time_t,
                                           arg3: *mut ::libc::c_char,
                                           arg4: *mut ::libc::c_char,
                                           arg5: time_t, arg6: time_t,
                                           arg7: ::libc::c_int,
                                           arg8: ::libc::c_ulong,
                                           arg9: ::libc::c_ulong) -> ();
    pub fn acknowledge_host_problem(arg1: *mut host,
                                    arg2: *mut ::libc::c_char,
                                    arg3: *mut ::libc::c_char,
                                    arg4: ::libc::c_int, arg5: ::libc::c_int,
                                    arg6: ::libc::c_int) -> ();
    pub fn acknowledge_service_problem(arg1: *mut service,
                                       arg2: *mut ::libc::c_char,
                                       arg3: *mut ::libc::c_char,
                                       arg4: ::libc::c_int,
                                       arg5: ::libc::c_int,
                                       arg6: ::libc::c_int) -> ();
    pub fn remove_host_acknowledgement(arg1: *mut host) -> ();
    pub fn remove_service_acknowledgement(arg1: *mut service) -> ();
    pub fn start_executing_service_checks() -> ();
    pub fn stop_executing_service_checks() -> ();
    pub fn start_accepting_passive_service_checks() -> ();
    pub fn stop_accepting_passive_service_checks() -> ();
    pub fn enable_passive_service_checks(arg1: *mut service) -> ();
    pub fn disable_passive_service_checks(arg1: *mut service) -> ();
    pub fn start_using_event_handlers() -> ();
    pub fn stop_using_event_handlers() -> ();
    pub fn enable_service_event_handler(arg1: *mut service) -> ();
    pub fn disable_service_event_handler(arg1: *mut service) -> ();
    pub fn enable_host_event_handler(arg1: *mut host) -> ();
    pub fn disable_host_event_handler(arg1: *mut host) -> ();
    pub fn enable_host_checks(arg1: *mut host) -> ();
    pub fn disable_host_checks(arg1: *mut host) -> ();
    pub fn start_obsessing_over_service_checks() -> ();
    pub fn stop_obsessing_over_service_checks() -> ();
    pub fn start_obsessing_over_host_checks() -> ();
    pub fn stop_obsessing_over_host_checks() -> ();
    pub fn enable_service_freshness_checks() -> ();
    pub fn disable_service_freshness_checks() -> ();
    pub fn enable_host_freshness_checks() -> ();
    pub fn disable_host_freshness_checks() -> ();
    pub fn process_passive_checks() -> ();
    pub fn enable_all_failure_prediction() -> ();
    pub fn disable_all_failure_prediction() -> ();
    pub fn enable_performance_data() -> ();
    pub fn disable_performance_data() -> ();
    pub fn start_executing_host_checks() -> ();
    pub fn stop_executing_host_checks() -> ();
    pub fn start_accepting_passive_host_checks() -> ();
    pub fn stop_accepting_passive_host_checks() -> ();
    pub fn enable_passive_host_checks(arg1: *mut host) -> ();
    pub fn disable_passive_host_checks(arg1: *mut host) -> ();
    pub fn start_obsessing_over_service(arg1: *mut service) -> ();
    pub fn stop_obsessing_over_service(arg1: *mut service) -> ();
    pub fn start_obsessing_over_host(arg1: *mut host) -> ();
    pub fn stop_obsessing_over_host(arg1: *mut host) -> ();
    pub fn set_host_notification_number(arg1: *mut host, arg2: ::libc::c_int)
     -> ();
    pub fn set_service_notification_number(arg1: *mut service,
                                           arg2: ::libc::c_int) -> ();
    pub fn enable_contact_host_notifications(arg1: *mut contact) -> ();
    pub fn disable_contact_host_notifications(arg1: *mut contact) -> ();
    pub fn enable_contact_service_notifications(arg1: *mut contact) -> ();
    pub fn disable_contact_service_notifications(arg1: *mut contact) -> ();
    pub fn init_check_result_worker_thread() -> ::libc::c_int;
    pub fn shutdown_check_result_worker_thread() -> ::libc::c_int;
    pub fn check_result_worker_thread(arg1: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cleanup_check_result_worker_thread(arg1: *mut ::libc::c_void)
     -> ();
    pub fn init_command_file_worker_thread() -> ::libc::c_int;
    pub fn shutdown_command_file_worker_thread() -> ::libc::c_int;
    pub fn command_file_worker_thread(arg1: *mut ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cleanup_command_file_worker_thread(arg1: *mut ::libc::c_void)
     -> ();
    pub fn submit_external_command(arg1: *mut ::libc::c_char,
                                   arg2: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn submit_raw_external_command(arg1: *mut ::libc::c_char,
                                       arg2: *mut time_t,
                                       arg3: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn get_program_version() -> *mut ::libc::c_char;
    pub fn get_program_modification_date() -> *mut ::libc::c_char;
    pub fn mmap_fopen(arg1: *mut ::libc::c_char) -> *mut mmapfile;
    pub fn mmap_fclose(arg1: *mut mmapfile) -> ::libc::c_int;
    pub fn mmap_fgets(arg1: *mut mmapfile) -> *mut ::libc::c_char;
    pub fn mmap_fgets_multiline(arg1: *mut mmapfile) -> *mut ::libc::c_char;
    pub fn pnp_mmap_fopen(arg1: *mut ::libc::c_char) -> *mut pnp_mmapfile;
    pub fn pnp_mmap_fclose(arg1: *mut pnp_mmapfile) -> ::libc::c_int;
    pub fn pnp_mmap_fgets(arg1: *mut pnp_mmapfile) -> *mut ::libc::c_char;
    pub fn pnp_mmap_fgets_multiline(arg1: *mut pnp_mmapfile)
     -> *mut ::libc::c_char;
    pub fn pnp_strip(arg1: *mut ::libc::c_char) -> ();
}
